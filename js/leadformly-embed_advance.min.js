var lf_load_script = document.getElementById('lf-load-scripts');
var lf_load_script_src = lf_load_script.getAttribute("src");
var lf_load_script_src_path = lf_load_script_src.split("assets/js");
var clientIp;
var element = {datepicker: true, multiselect: true, phone: true};
var lf_containers = document.getElementsByClassName("lf-container");


element = setElements(lf_containers, element);

document.addEventListener("DOMContentLoaded", function (event) {
    var lf_containers = document.getElementsByClassName("lf-container");
    element = setElements(lf_containers, element);
});

if ((lf_load_script_src_path[0]).indexOf("localhost") > 0) {
    lf_load_script_src_path[0] = lf_load_script_src_path[0] + "storage/";
}

var jquery_script_tag = document.createElement("script");
jquery_script_tag.setAttribute("type", "text/javascript");
jquery_script_tag.setAttribute("src", lf_load_script_src_path[0] + "assets/js/lfvh.min.js");

if (jquery_script_tag.readyState) {
    jquery_script_tag.onreadystatechange = function () { // For old versions of IE
        if (this.readyState === "complete" || this.readyState === "loaded") {
            loadBootstrapScript();
        }
    };
} else {
    jquery_script_tag.onload = function () {
        loadBootstrapScript();
    };
}

if (!isScriptLoaded(lf_load_script_src_path[0] + "assets/js/lfvh.min.js")) {
    // Try to find the head, otherwise default to the documentElement
    (document.getElementsByTagName("head")[0] || document.documentElement).appendChild(jquery_script_tag);
} else {
    loadBootstrapScript();
}


function loadBootstrapScript() {
    if (!isScriptLoaded(lf_load_script_src_path[0] + "assets/js/embed/v4.0/lf-bootstrap.min.js")) {
        var bootstrap_script_tag = document.createElement("script");
        bootstrap_script_tag.setAttribute("type", "text/javascript");
        bootstrap_script_tag.setAttribute("src", lf_load_script_src_path[0] + "assets/js/embed/v4.0/lf-bootstrap.min.js");

        if (bootstrap_script_tag.readyState) {
            bootstrap_script_tag.onreadystatechange = function () { // For old versions of IE
                if (this.readyState === "complete" || this.readyState === "loaded") {
                    loadLfWidgetScript();
                }
            };
        } else {
            bootstrap_script_tag.onload = function () {
                loadLfWidgetScript();
            };
        }
        // Try to find the head, otherwise default to the documentElement
        (document.getElementsByTagName("head")[0] || document.documentElement).appendChild(bootstrap_script_tag);
    } else {
        loadLfWidgetScript();
    }
}

function loadLfWidgetScript() {
    /* Get IP of Client  */
    lfvh_jQuery.ajax({
        url: 'https://jsonip.com/',
        success: function (response) {
            clientIp = response.ip;
        }
    });
    var lf_container = document.getElementsByClassName("lf-container");
    if (lf_container.length > 0) {
        for (var scripti = 0; scripti < lf_container.length; scripti++) {
            var lf_container_id = lf_container[scripti].id;
            var embed_code = document.getElementById(lf_container_id);
            if (embed_code.getAttribute("data-embed-type") === "raw") {
                var container = document.getElementById(lf_container_id);
                var form = container.getElementsByClassName("lf-form-container");
                setElementsPro();
                loadIntlTelInputScript(lf_container_id);
            } else {
                lfIncludeHTML(lf_container_id);
            }
        }
    }
}
function loadIntlTelInputScript(lf_container_id) {
    if (element.phone) {
        var lf_intltelinput_script_tag = document.createElement("script");
        lf_intltelinput_script_tag.setAttribute("type", "text/javascript");
        lf_intltelinput_script_tag.setAttribute("src", lf_load_script_src_path[0] + "assets/js/embed/v4.0/lf-embed-intlTelInput.min.js");

        if (lf_intltelinput_script_tag.readyState) {
            lf_intltelinput_script_tag.onreadystatechange = function () { // For old versions of IE
                if (this.readyState === "complete" || this.readyState === "loaded") {
                    loadBootstrapMultiselectScript(lf_container_id);
                }
            };
        } else {
            lf_intltelinput_script_tag.onload = function () {
                loadBootstrapMultiselectScript(lf_container_id);
            };
        }

        if (!isScriptLoaded(lf_load_script_src_path[0] + "assets/js/embed/v4.0/lf-embed-intlTelInput.min.js")) {
            // Try to find the head, otherwise default to the documentElement
            (document.getElementsByTagName("head")[0] || document.documentElement).appendChild(lf_intltelinput_script_tag);
        }
    } else {
        loadBootstrapMultiselectScript(lf_container_id);
    }
}

function loadBootstrapMultiselectScript(lf_container_id) {
    if (element.multiselect) {
        var lf_bootstrapmultiselect_script_tag = document.createElement("script");
        lf_bootstrapmultiselect_script_tag.setAttribute("type", "text/javascript");
        lf_bootstrapmultiselect_script_tag.setAttribute("src", lf_load_script_src_path[0] + "assets/js/embed/v4.0/lf-embed-bootstrap-multiselect.min.js");

        if (lf_bootstrapmultiselect_script_tag.readyState) {
            lf_bootstrapmultiselect_script_tag.onreadystatechange = function () { // For old versions of IE
                if (this.readyState === "complete" || this.readyState === "loaded") {
                    loadMomentScript(lf_container_id);
                }
            };
        } else {
            lf_bootstrapmultiselect_script_tag.onload = function () {
                loadMomentScript(lf_container_id);
            };
        }

        if (!isScriptLoaded(lf_load_script_src_path[0] + "assets/js/embed/v4.0/lf-embed-bootstrap-multiselect.min.js")) {
            // Try to find the head, otherwise default to the documentElement
            (document.getElementsByTagName("head")[0] || document.documentElement).appendChild(lf_bootstrapmultiselect_script_tag);
        }
    } else {
        loadMomentScript(lf_container_id);
    }
}

function loadMomentScript(lf_container_id) {
    if (element.datepicker) {
        var lf_moment_script_tag = document.createElement("script");
        lf_moment_script_tag.setAttribute("type", "text/javascript");
        lf_moment_script_tag.setAttribute("src", lf_load_script_src_path[0] + "assets/js/frontend/moment.min.js");

        if (lf_moment_script_tag.readyState) {
            lf_moment_script_tag.onreadystatechange = function () { // For old versions of IE
                if (this.readyState === "complete" || this.readyState === "loaded") {
                    loadDatepickerScript(lf_container_id);
                }
            };
        } else {
            lf_moment_script_tag.onload = function () {
                loadDatepickerScript(lf_container_id);
            };
        }

        if (!isScriptLoaded(lf_load_script_src_path[0] + "assets/js/frontend/moment.min.js")) {
            // Try to find the head, otherwise default to the documentElement
            (document.getElementsByTagName("head")[0] || document.documentElement).appendChild(lf_moment_script_tag);
        }
    } else {
        init_widget(lf_container_id);
    }
}

function loadDatepickerScript(lf_container_id) {
    var lf_datepicker_script_tag = document.createElement("script");
    lf_datepicker_script_tag.setAttribute("type", "text/javascript");
    lf_datepicker_script_tag.setAttribute("src", lf_load_script_src_path[0] + "assets/js/embed/lf-embed-daterangepicker.min.js");

    if (lf_datepicker_script_tag.readyState) {
        lf_datepicker_script_tag.onreadystatechange = function () { // For old versions of IE
            if (this.readyState === "complete" || this.readyState === "loaded") {
                init_widget(lf_container_id);
            }
        };
    } else {
        lf_datepicker_script_tag.onload = function () {
            init_widget(lf_container_id);
        };
    }

    if (!isScriptLoaded(lf_load_script_src_path[0] + "assets/js/embed/lf-embed-daterangepicker.js")) {
        // Try to find the head, otherwise default to the documentElement
        (document.getElementsByTagName("head")[0] || document.documentElement).appendChild(lf_datepicker_script_tag);
    }
}

function isScriptLoaded(url) {
    var scripts = document.getElementsByTagName("script");
    for (var i = scripts.length; i--; ) {
        if (scripts[i].src === url)
            return true;
    }
    return false;
}


function lfIncludeHTML(lf_container_id) {
    var z, i, elmnt, file, xhttp;
    elmnt = document.getElementById(lf_container_id);
    if (elmnt.getAttribute("lf-include-html") !== null) {
        file = elmnt.getAttribute("lf-include-html");
    }
    if (file) {
        xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function () {

            if (this.readyState === 4 && this.status === 200) {
                elmnt.innerHTML = this.responseText;

                var form = elmnt.getElementsByClassName("lf-form-container");
                var node = document.createElement("div");
                node.setAttribute("class", 'leadformly-loader');
                node.innerHTML = '<div class="lf-fountainG-container">' +
                        '<div><img src="' + lf_load_script_src_path[0] + 'assets/img/ring.svg"></div>' +
                        '</div>';
                if (form[0] !== undefined && node !== undefined) {
                    form[0].appendChild(node);
                }
                var xmlString = this.responseText
                        , parser = new DOMParser()
                        , doc = parser.parseFromString(xmlString, "text/html")
                        , script = doc.getElementsByTagName("script");
                for (var i = 0; i < script.length; i++) {
                    var s = document.createElement("script");
                    if(s !== null && s !== undefined){
                        s.type = "text/javascript";
                        s.text = script[i].innerHTML;
                        document.body.appendChild(s);
                    }
                }

                elmnt.removeAttribute("lf-include-html");
                setElementsPro();
                loadIntlTelInputScript(lf_container_id);
            }
        };
        xhttp.open("GET", lf_load_script_src_path[0] + file, true);
        xhttp.send();
        formLoadStatus = true;
        return;
    }
}
function setElementsPro(){
    var All = document.getElementsByClassName("form-element-list");
    element.datepicker = false;
    element.phone = false;
    element.multiselect = false;
    for (var i = 0; i < All.length; i++)       {
        if (All[i].getAttribute("element-type") === "-1") { element.datepicker = true; }
        if (All[i].getAttribute("element-type") === "2") { element.phone = true; }
        if (All[i].getAttribute("element-type") === "10") { element.multiselect = true; }
    }
}
function setElements(lf_containers, element) {
    for (var i = 0; i < lf_containers.length; i++) {
        var lf_elements = lf_containers[i].getAttribute("lf-elements");
        var lf_element = JSON.parse("[" + lf_elements + "]");
        for (var j = 0; j < lf_element.length; j++) {
            if (lf_element[j] === 2) {
                element.phone = true;
            } else if (lf_element[j] === 10) {
                element.multiselect = true;
            } else if (lf_element[j] === -1) {
                element.datepicker = true;
            }
        }
    }
    return element;
}



/* -----------------------------------------------------lf-embed-Widget.php conversion to js code----------------------------------------------------------------*/

if (typeof lfvh_jQuery === "undefined") {
    // Localize lfvh_jQuery variable
    var lfvh_jQuery;
}


var removeLoader = function(formLoader, formEmbedType) {
    var loader = formLoader.length;
    switch(formEmbedType) {
        case "simple": 
            window.setTimeout(function () {
                for (var i = 0; i < loader; i++) {
                    formLoader[i].style.display = "none";
                }
            }, 300);
            break;
        case "raw": 
            window.addEventListener("load", function() {
                window.setTimeout(function () {
                    for (var i = 0; i < loader; i++) {
                        formLoader[i].style.display = "none";
                    }
                }, 300);
            });
            break;
    }
};

var replaceClass = function(lfcID, classR, ClassA) {
    var classElement = lfvh_jQuery("#" + lfcID).find("." + classR);
    if(classElement.length > 0) {
        lfvh_jQuery.each(classElement, function(){
            lfvh_jQuery(this).removeClass(classR).addClass(ClassA);
        });
    }
};

function init_widget($uniqueFormID) {
    scriptLoadHandler();

    var  formEmbedType = document.getElementById($uniqueFormID).getAttribute("data-embed-type");
    removeLoader(document.getElementsByClassName("leadformly-loader"), formEmbedType);
    
    /******** Called once jQuery has loaded ******/
    function scriptLoadHandler() {
        // Restore $ and window.jQuery to their previous values and store the
        // new jQuery in our local lfvh_jQuery variable
        if (lfvh_jQuery === undefined) {
            lfvh_jQuery = window.jQuery.noConflict(true);
        }
        // Call our main function
        main();
    }


    /******** Our main function ********/
    function main() {
		if (lfvh_jQuery(".lf-container").attr("data-zapier")) {
			var action_url = lfvh_jQuery(".lf-container").attr("data-zapier");
			lfvh_jQuery(".lf-form-container").attr("action", action_url);
		}
		
		lfvh_jQuery("#" + $uniqueFormID + " form").show();
//		console.log("#" + $uniqueFormID + " #lf_" + form_embed_id + "_custom-question-answer-form");
		
//        prepareFormVisit();
        
        /* New code by OS for applying background color to currency select box if field is transperant */
        function getStyleSheetPropertyValue(selectorText, propertyName) {
            // search backwards because the last match is more likely the right one
            for (var s= document.styleSheets.length - 1; s >= 0; s--) {
                var cssRules = document.styleSheets[s].cssRules ||
                        document.styleSheets[s].rules || []; // IE support
                for (var c=0; c < cssRules.length; c++) {
                    if (cssRules[c].selectorText === selectorText) 
                        return cssRules[c].style[propertyName];
                }
            }
            return null;
        }
        
        var lf_ff_back_color = lfvh_jQuery(".lf-form-fields").css("background-color");
        
        if(lf_ff_back_color === "rgba(0, 0, 0, 0)"){
            try{
                lf_ff_back_color = getStyleSheetPropertyValue(".lf-form-fields","background-color").replace(/\)/g,',1)').replace(/rgb\(/g,'rgba(');
            }catch(e){}
        }
        
        if (lf_ff_back_color !== undefined) {
            lf_ff_back_color = lf_ff_back_color.replace('rgba', '');
            lf_ff_back_color = lf_ff_back_color.replace('(', '');
            lf_ff_back_color = lf_ff_back_color.replace(')', '');
            var lf_ff_bc_arr = lf_ff_back_color.split(',');
            if (lf_ff_bc_arr[3] <= 0) {
                var new_back_color = lfvh_jQuery(".lf-form-container").css("background-color");
                lfvh_jQuery(".currency-symbol").attr("style", "background-color:" + new_back_color + " !important");
            }
        }
        /* End New code by OS for applying background color to currency select box if field is transperant */

        var url = document.getElementById($uniqueFormID).getAttribute("data-target");
        var token = document.getElementById($uniqueFormID).getAttribute("data-token");
        var embed_type = document.getElementById($uniqueFormID).getAttribute("data-embed-type");
        var abc = token.split('+');
        var form_embed_id = abc[1];
        var current_page_url = window.location.href;
        var powered_by_link = "//leadformly.com/?utm_source=poweredbylink&utm_campaign=" + current_page_url + "&utm_medium=referral";

        lfvh_jQuery("#" + $uniqueFormID + " #lf_" + form_embed_id + "_lf-power-link-redirect").attr("href", powered_by_link);
        if(lfvh_jQuery("#" + $uniqueFormID + " #lf_" + form_embed_id + "_custom-question-answer-form").find("input[name='lf-fb-hp']").length === 0) { lfvh_jQuery("#" + $uniqueFormID + " #lf_" + form_embed_id + "_custom-question-answer-form").prepend("<input name='lf-fb-hp' type='text' autocomplete='off' />"); }
        operateLoadedForm(form_embed_id, embed_type);
        decode_uri_component();

        lfvh_jQuery("body #" + $uniqueFormID).delegate("#html-final", "keypress", function (e) {
            if (e.which === "13") {
                lfvh_jQuery("#custom-question-answer-form button.submit-button").click();
            }
        });

        lfvh_jQuery("body #" + $uniqueFormID).delegate("select", "change", function (e) {
            var selected_value = lfvh_jQuery(this).val();
            lfvh_jQuery(this).find("option").each(function () {
                this.removeAttribute("selected");
            });
            lfvh_jQuery(this).find('option[value="' + selected_value + '"]').attr("selected", "selected");
            lfvh_jQuery(this).val(selected_value);
        });

        lfvh_jQuery(document).on("click", "#" + $uniqueFormID + " #lf_" + form_embed_id + "_custom-question-answer-form button.submit-button", function (event) {
            event.preventDefault();
            lfvh_jQuery(this).prop("value", lfvh_jQuery(this).html());
            lfvh_jQuery(this).prop("disabled", "disabled");
            $url = lfvh_jQuery(this).attr("data-value");
            $urlPost = lfvh_jQuery(this).attr("data-post");
            $submit_btn = this;
            var lf_fb_hp = lfvh_jQuery("#lf_" + form_embed_id + "_custom-question-answer-form input[name='lf-fb-hp']").val();
            if (lf_fb_hp === "") {
                lfvh_jQuery(this).closest("form").submit();
            } else {
                lfvh_jQuery("#lf_" + form_embed_id + "_custom-question-answer-form").prepend('<b class="msg-lf-fb-hp" style="color: #ff0000;">Something went wrong, please refresh page & try again.</b>');
            }
        });
        lfvh_jQuery(document).on("click", "#" + $uniqueFormID + " .lf-datepicker-div", function (e) {
            if (lfvh_jQuery(e.target).is(".lf-daterange"))
            {
                e.preventDefault();
                return;
            } else
            {
                lfvh_jQuery(this).find(".lf-daterange").trigger("click");
            }
        });
        lfvh_jQuery(document).on("submit", "#" + $uniqueFormID + " #lf_" + form_embed_id + "_custom-question-answer-form", function (event) {
            
            event.preventDefault();
            if (lfvh_jQuery(".lf-container").attr("data-embed-type") === "raw") {
                var action_url = (lfvh_jQuery(".lf-container").attr("data-target")).replace("leadformly-embed", "leads");
                if (lfvh_jQuery(".lf-form-container").attr("action") === "about:blank") {
                    lfvh_jQuery(".lf-form-container").attr("action", action_url);
                }
            }
            var submit_btn = lfvh_jQuery("#" + $uniqueFormID + " #lf_" + form_embed_id + "_custom-question-answer-form button.submit-button");
            lfvh_jQuery(submit_btn).prop("disabled", true);
            var flag = 0;
            var element = lfvh_jQuery(this);
            var temp_flag = [];

            var req_fields = [];

            // finding each required field at form
            lfvh_jQuery("[required]").each(function () {
                // get conditional field name
                if (lfvh_jQuery(this).is(":visible")) {
                    req_fields.push(lfvh_jQuery(this).attr("name"));
                }
            });
            lfvh_jQuery(lfvh_jQuery("#" + $uniqueFormID + " #lf_" + form_embed_id + "_html-form-tab-content").find('[required="true"]').get().reverse()).each(function () {
                temp_flag.push(checkRequired(lfvh_jQuery(this), form_embed_id));
            });
            lfvh_jQuery("#" + $uniqueFormID + " #lf_" + form_embed_id + "_html-form-tab-content").find(".lf-email").each(function(){
                if(lfvh_jQuery(this).val()!==""){
                   temp_flag.push(checkRequired(lfvh_jQuery(this)));
                } 
            });
            if (lfvh_jQuery.inArray(1, temp_flag) === -1) {
                flag = 0;
            } else {
                flag = 1;
            }
            if (flag === 0)
            {
                var token = lfvh_jQuery("#" + $uniqueFormID).attr("data-token");
                var clone_data = lfvh_jQuery(element).clone();
                clone_data.find(".lf-advance-image-selector").each(function () {
                    lfvh_jQuery(this).find(".lf-checkbox").each(function () {
                        if(lfvh_jQuery(this).attr("caption") !== "" && lfvh_jQuery(this).attr("caption") !== undefined){
                            lfvh_jQuery(this).val(lfvh_jQuery(this).attr("caption"));
                            lfvh_jQuery(this).attr("value", lfvh_jQuery(this).attr("caption"));
                        }
                    });
                });
                var cdata = clone_data.serializeArray();
				var data = [];
				cdata.forEach(function(e) {
					if(e.name == "form1-custom-form-question-17") {
						data.push({name: "quadratmeter", value: e.value});
					} else if(e.name == "form1-custom-form-question-16") {
						data.push({name: "miete", value: e.value});
					} else if(e.name == "form1-custom-form-question-11") {
						data.push({name: "gebäudeart", value: e.value});
					} else if(e.name == "html-form3-custom-form-question-9") {
						data.push({name: "mietvertrag", value: e.value});
					} else if(e.name == "form1-custom-form-question-13") {
						data.push({name: "3_jahre", value: e.value});
					} else if(e.name == "form1-custom-form-question-14") {
						data.push({name: "telefonnummer", value: e.value});
					};
				});
                $formDataPost = lfvh_jQuery("#custom-question-answer-form").serialize();
                if ($formDataPost === "" || $formDataPost === undefined) {
                    var clone_data = lfvh_jQuery("form.lf-form-container").clone();
                    clone_data.find(".lf-advance-image-selector").each(function () {
                        lfvh_jQuery(this).find(".lf-checkbox").each(function () {
                            if(lfvh_jQuery(this).attr("caption") !== "" && lfvh_jQuery(this).attr("caption") !== undefined){
                                lfvh_jQuery(this).val(lfvh_jQuery(this).attr("caption"));
                                lfvh_jQuery(this).attr("value", lfvh_jQuery(this).attr("caption"));
                            }
                        });
                    });
                    $formDataPost = clone_data.serialize();
                }
//                data.push({name: "secret_key", value: token});
//                data.push({name: "req_fields[]", value: req_fields});
                data.push({name: "client_ip", value: clientIp});				
                $formDataPost += "&source-ip=" + clientIp + "&source-url=" + location.href;
                lfvh_jQuery.post(
                        lfvh_jQuery(element).attr("action"), data,
                        function (response) {
                            lfvh_jQuery(element).find("button.submit-button").removeClass("disabled");
                            if (response.status === "success") {
                                lfvh_jQuery(element)[0].reset();
                                if (lfvh_jQuery(element).prev(".alert").length) {
                                    lfvh_jQuery(element).prev(".alert").removeClass("alert-danger").addClass("alert-success").html(response.msg);
                                }
                                if(lfvh_jQuery($submit_btn).attr("success-message") === "true"){
                                    lfvh_jQuery(".lf-success-message-container").removeClass("hide");
                                    lfvh_jQuery(".form-element-list:not(.lf-success-message .form-element-list)").addClass("lf-success-active");
                                }else{
                                    if (!lfvh_jQuery(element).prev(".alert").length) {
                                        lfvh_jQuery('<div class="alert alert-success" style="height:auto;">Your information has been submitted successfully.</div>').insertBefore(lfvh_jQuery(element));
                                    }
                                    if ($urlPost !== "undefined" && $urlPost !== undefined && $urlPost !== "") {
                                        window.location = $urlPost + "?" + $formDataPost;
                                    } else {
                                        window.open($url, "_self");
                                    }
                                }
                            } else {
								var error = "Form not submitted";
                                if (lfvh_jQuery(element).prev(".alert").length) {
                                    lfvh_jQuery(element).prev(".alert").removeClass("alert-success").addClass("alert-error").html(error);
                                } else {
                                    lfvh_jQuery('<div class="alert alert-danger" style="height:auto;">' + error + '</div>').insertBefore(lfvh_jQuery(element));
                                }
                                lfvh_jQuery(submit_btn).prop("disabled", false).removeAttr("disabled");
                            }
                        },
                        "json"
                        );
            }
            event.stopPropagation();
        });
    }
    
    function decode_uri_component() {
        function decode_uri_val(_this){
            try {
                lfvh_jQuery(_this).val(decodeURIComponent(escape(lfvh_jQuery(_this).val())));
                if (lfvh_jQuery(_this).attr("placeholder") !== undefined) {
                    lfvh_jQuery(_this).attr("placeholder", decodeURIComponent(escape(lfvh_jQuery(_this).attr("placeholder"))));
                }
            } catch (err) {
                return true;
            }
        }
        function decode_uri_text(_this){
            try {
                lfvh_jQuery(_this).text(decodeURIComponent(escape(lfvh_jQuery(_this).text())));
            } catch (err) {
                return true;
            }
        }
        // input text element
        lfvh_jQuery("body").find('.lf-customize-form-container input[type="text"]').each(function () {
            decode_uri_val(this);
        });

        // textarea element
        lfvh_jQuery("body").find(".lf-customize-form-container textarea").each(function () {
            decode_uri_val(this);
        });

        // email element
        lfvh_jQuery("body").find('.lf-customize-form-container input[type="email"]').each(function () {
            decode_uri_val(this);
        });

        // hidden input element
        lfvh_jQuery("body").find('.lf-customize-form-container input[type="hidden"]').each(function () {
            decode_uri_val(this);
        });

        // toggle div element
        lfvh_jQuery("body").find(".lf-customize-form-container div.toggle-label-first").each(function () {
            decode_uri_text(this);
        });

        // toggle div element
        lfvh_jQuery("body").find(".lf-customize-form-container div.toggle-label-second").each(function () {
            decode_uri_text(this);
        });

        // slider div element
        lfvh_jQuery("body").find(".lf-customize-form-container div.slider-value").each(function () {
            decode_uri_text(this);
        });

        // slider div element
        lfvh_jQuery('body').find('.lf-customize-form-container input[type="range"]').each(function () {
            try {
                lfvh_jQuery(this).attr('prefix', decodeURIComponent(escape(lfvh_jQuery(this).attr('prefix'))));
                lfvh_jQuery(this).attr('postfix', decodeURIComponent(escape(lfvh_jQuery(this).attr('postfix'))));
            } catch (err) {
                return true;
            }
        });

        // question labels
        lfvh_jQuery('body').find('.lf-customize-form-container label.custom-form-label').each(function () {
            decode_uri_text(this);
        });

        // call to action button element
        lfvh_jQuery('body').find('.lf-customize-form-container button.submit-button').each(function () {
            decode_uri_text(this);
        });

        // customiser text element
        lfvh_jQuery('body').find('.lf-customize-form-container p.text-element').each(function () {
            decode_uri_text(this);
        });

        // customiser button element
        lfvh_jQuery('body').find('.lf-customize-form-container a.lf-buttons').each(function () {
            decode_uri_text(this);
        });

        // select box options element
        lfvh_jQuery('body').find('.lf-customize-form-container select option').each(function () {
            decode_uri_text(this);
        });

        // image selector title element
        lfvh_jQuery('body').find('.lf-customize-form-container li.lf-image-title').each(function () {
            decode_uri_text(this);
        });
    }

    function customFormProgress(status) {

        lfvh_jQuery(".lf-checkout-bar").find("li:eq(" + (status + 1) + ")").addClass('active');

    }
    function customFormProgressPrevious(status) {

        lfvh_jQuery(".lf-checkout-bar").find("li:eq(" + (status + 1) + ")").removeClass('active');

    }

    // Function to get currency list for currency field.
    function currency(_this) {

        var currency_option = '';
        var currency_symbol = ['-', '&#xa4;', '&#x24;', '&#xa2;', '&#xa3;', '&#xa5;', '&#x20a3;', '&#x20a4;', '&#x80;', '&#x20B9;', '&#x20a9;', '&#x20b4;', '&#x20ae;', '&#x20b0;', '&#x20b2;', '&#x20b1;', '&#x20b3;', '&#x20b5;', '&#x20ad;', '&#x20aa;', '&#x20ab;', '&#x25;'];
        lfvh_jQuery.each(currency_symbol, function () {
            currency_option += "<option>" + this + "</option>";
        });
        _this.append(currency_option);
        _this.on('change', function () {
            lfvh_jQuery(_this).next('.lf-currency').val(lfvh_jQuery(_this).val() + "    ").focus();
        });

    }
    function sidebarUniqueCss(css_string) {
        var new_css = '';
        lfvh_jQuery.each(css_string.split('/**/'), function (key, value) {
            if (key === 0) {
                new_css += '#' + $uniqueFormID + ' ' + value.replace("none;", "none !important;");
            } else {
                new_css += '/**/#' + $uniqueFormID + ' ' + value.replace("none;", "none !important;");
            }
        });
        return new_css;
    }
    // Function for change properties of form elements after form loaded successfully by embedding code
    function operateLoadedForm(form_embed_id, embed_type) {
        /* End Get IP of Client  */
        generateImageOverlay();
        makeDatePickerActive($uniqueFormID);
        if (embed_type === "simple") {
            lfvh_jQuery('#' + $uniqueFormID).find('style.form-style-sidebar').text(
                    $uniqueFormID.replace(/-/g, '_') +
                    sidebarUniqueCss(lfvh_jQuery('#' + $uniqueFormID).find('style.form-style-sidebar').text())
                    );
            lfvh_jQuery('#' + $uniqueFormID).find('style.form-style-id').text(sidebarUniqueCss(lfvh_jQuery('#' + $uniqueFormID).find('style.form-style-id').text()));
            lfvh_jQuery('#' + $uniqueFormID).find('style.form-style-default').text(sidebarUniqueCss(lfvh_jQuery('#' + $uniqueFormID).find('style.form-style-default').text() + '#' + $uniqueFormID + ' .toggle-switch-class.active .custom-form-toggle-pointer {float: right !important;}'));
            lfvh_jQuery('#' + $uniqueFormID).find('style.form-style-hover').text(sidebarUniqueCss(lfvh_jQuery('#' + $uniqueFormID).find('style.form-style-hover').text()));
            lfvh_jQuery('#' + $uniqueFormID).find('style.form-style-active').text(sidebarUniqueCss((lfvh_jQuery('#' + $uniqueFormID).find('style.form-style-active').text()).replace('.lf-form-fields:focus{', '#' + $uniqueFormID.replace(/-/g, '_') + ' .lf-form-fields:focus{')));
        }

        var default_css = lfvh_jQuery('#' + $uniqueFormID).find('style.form-style-default').text();
        if (default_css.indexOf('#' + $uniqueFormID + ' .lf-invalid-element') < 0) {
            default_css = default_css + '/**/#' + $uniqueFormID + ' .lf-invalid-element-light{border:1px solid #ffffff !important;outline:none !important;}.lf-invalid-element{border:1px solid #D6041D !important;outline:none !important;}/**/#' + $uniqueFormID + ' .lf-error-label-light{display:block;font-size:12px !important;text-transform: uppercase;color:#FFF !important;width: 90%;margin: auto;}.lf-error-label{display:block;font-size:12px !important;text-transform: uppercase;color:#D6041D !important;width: 90%;margin: auto;}/**/.lf-label-warning{font-weight: bold !important;color: #D6041D !important;}.lf-label-warning-light{font-weight: bold !important;color: #FFF !important;}';
        }
        if (default_css.indexOf('#' + $uniqueFormID + ' .image-selector-tooltip-box') < 0) {
            default_css = default_css + '/**/#' + $uniqueFormID + ' .image-selector-tooltip-box{font-family:inherit;}';
        }
        if (default_css.indexOf('.lf-customize-form-container') < 0) {
            default_css = default_css + '/**/#' + $uniqueFormID + ' .lf-customize-form-container{font-family:inherit;}';
        }
        lfvh_jQuery('#' + $uniqueFormID).find('style.form-style-default').text(default_css);

        lfvh_jQuery('#' + $uniqueFormID + ' #lf_' + form_embed_id + '_custom-question-answer-form .submit-button').prop('disabled', false).removeAttr('disabled');

        var steps_to_proceed = 100 / lfvh_jQuery('#lf_' + form_embed_id + '_progress-bar').attr('aria-valuemax');
        lfvh_jQuery('#' + $uniqueFormID + ' #lf_' + form_embed_id + '_progress-bar').attr('style', 'width:' + steps_to_proceed + "% !important");

        if (lfvh_jQuery('#' + $uniqueFormID + ' #lf_' + form_embed_id + '_custom-question-answer-form .form.active').length > 1) {
            // Select first tab
            lfvh_jQuery('#' + $uniqueFormID + ' #lf_' + form_embed_id + '_custom-question-answer-form .tab-content .form').addClass('active');
        } else {
            // Select first tab
            lfvh_jQuery('#' + $uniqueFormID + ' #lf_' + form_embed_id + '_custom-question-answer-form .tab-content .form:first').addClass('active');
            lfvh_jQuery('#' + $uniqueFormID + ' #lf_' + form_embed_id + '_custom-question-answer-form .tab-content .form:first').siblings().removeClass('active');
        }
        lfvh_jQuery('#' + $uniqueFormID + ' #lf_' + form_embed_id + '_custom-question-answer-form input,#lf_' + form_embed_id + '_custom-question-answer-form select,#' + $uniqueFormID + ' #lf_' + form_embed_id + '_custom-question-answer-form textarea').on('change keyup', function () {
            lfvh_jQuery('#' + $uniqueFormID + ' #lf_' + form_embed_id + '_custom-question-answer-form .submit-button').removeAttr('disabled');
        });
        
        lfvh_jQuery('body').delegate('#' + $uniqueFormID + ' .telephone', 'blur', function () {
            if (lfvh_jQuery(this).val() === "") {
                //            lfvh_jQuery(this).tooltip({title: "Invalid phone number", placement: "right"});
                lfvh_jQuery(this).on("hidden.bs.tooltip",
                        function () {
                            lfvh_jQuery(this).css({"display": "", "position": "inherit", "top": 0, "left": 0});
                        });
                if (lfvh_jQuery(this).parents('#lf-add-form').length < 0) {
                    lfvh_jQuery(this).focus();
                }
            } else {
                //lfvh_jQuery(this).tooltip('disable');
            }
        });



        lfvh_jQuery('#' + $uniqueFormID + ' .lf-container').find('img').each(function () {
            if (lfvh_jQuery(this).parent().is('p')) {
                lfvh_jQuery(this).unwrap();
            }
        });
        lfvh_jQuery('#' + $uniqueFormID + ' .caption-box').each(function () {
            lfvh_jQuery(this).find('p').remove();
        });
        lfvh_jQuery('body').delegate('.telephone,.lf-currency', 'paste', function (e) {
            var old_value = lfvh_jQuery(this).val();
            var _this = this;
            setTimeout(function () {
                value = lfvh_jQuery(_this).val();
                value = value.replace(old_value, '');
                value = value.replace(/\+/g, '').replace(/[^0-9]/g,'');
                lfvh_jQuery(_this).val(old_value + value);
            }, 2);
        });
        
        lfvh_jQuery('body').delegate('#' + $uniqueFormID + ' .telephone', 'keypress', function (e) {
            if(lfvh_jQuery(this).val().length > 14){return false;}
            var str = lfvh_jQuery(this).val();
            if (lfvh_jQuery(this).attr('required') === "required") {
                if (str.length > 4) {
                    destroyTooltip(lfvh_jQuery(this).parent('.intl-tel-input'));
                }
            }
            if ((e.which >= 48 && e.which <= 57) || e.which === 43 || e.which === 8 || e.which === 0) {
                if (str.length === 15 && e.which !== 8 && e.which !== 0) {
                    return false;
                }
                if (e.which === 43 && str.indexOf('+') > -1) {
                    return false;
                }
            } else {
                return false;
            }
        });
        lfvh_jQuery('body').on('keyup', '#' + $uniqueFormID + ' li[element-type="1"] .lf-form-fields,#' + $uniqueFormID + ' li[element-type="5"] .lf-form-fields,#' + $uniqueFormID + ' .lf-email,#' + $uniqueFormID + ' .lf-city,#' + $uniqueFormID + ' .lf-address-line1,#' + $uniqueFormID + ' .lf-postal-code,#' + $uniqueFormID + ' .select-other-textarea', function () {
            var value = lfvh_jQuery(this).val();
            if (value.trim() === '') {
                setTooltip(lfvh_jQuery(this),   "Bitte f&#252;llen Sie dieses Feld aus");	//	"PLEASE COMPLETE THIS FIELD"
                lfvh_jQuery(this).val('');
            } else {
                destroyTooltip(lfvh_jQuery(this));
            }
//            if (value.length === 0) {
//                destroyTooltip(lfvh_jQuery(this));
//                return;
//            }
        });
        lfvh_jQuery('body').on('change', '#' + $uniqueFormID + ' .lf-email', function () {
            var value = lfvh_jQuery(this).val();
            if(value==='' && lfvh_jQuery(this).attr('required')!=='required'){return;}
            if (lfvh_jQuery(this).hasClass('lf-email')) {
                var pattern = /^([a-z\d!#$%&'*+\-\/=?^_`{|}~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+(\.[a-z\d!#$%&'*+\-\/=?^_`{|}~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+)*|"((([ \t]*\r\n)?[ \t]+)?([\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|\\[\x01-\x09\x0b\x0c\x0d-\x7f\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))*(([ \t]*\r\n)?[ \t]+)?")@(([a-z\d\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|[a-z\d\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF][a-z\d\-._~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]*[a-z\d\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])\.)+([a-z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|[a-z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF][a-z\d\-._~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]*[a-z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])\.?$/i;
                if (!pattern.test(value))
                {
                    var message = 'Invalid Email address';
                    setTooltip(lfvh_jQuery(this), message);
                } else {
                    pattern = /^([a-zA-Z0-9_.+-])+\@(([a-zA-Z0-9-])+\.)+([a-zA-Z0-9]{2,4})+$/;
                    if (!pattern.test(value)) {
                        var message = 'Invalid Email address';
                        setTooltip(lfvh_jQuery(this), message);
                    } else {
                        destroyTooltip(lfvh_jQuery(this));
                    }
                }
            }
        });
        lfvh_jQuery('body').delegate('#' + $uniqueFormID + ' .lf-currency', 'keyup', function (e) {
            var value = lfvh_jQuery(this).val();
            if(doGetCaretPosition(this) < 5){
                var selected_currency = lfvh_jQuery(this).prev('.currency-symbol').val();
                value = value.replace(selected_currency,'');
                value = value.trim();
                value = selected_currency+'    '+value;
                lfvh_jQuery(this).val(value);
                setCaretPosition(this.id,5);
            }
        });
        lfvh_jQuery('body').delegate('#' + $uniqueFormID + ' .lf-currency', 'blur', function (e) {
            value = lfvh_jQuery(this).val();
            var selected_currency = lfvh_jQuery(this).prev('.currency-symbol').val();
            value = value.replace(selected_currency+'    ','');
            if(value.indexOf('.') > -1 && value.length > 1){
                value = parseFloat(value);
                value = selected_currency+'    '+value;
                lfvh_jQuery(this).val(value);
            }
        });
        lfvh_jQuery('body').delegate('#' + $uniqueFormID + ' .lf-currency', 'keypress', function (e) {
            var value = lfvh_jQuery(this).val();
            if (value.indexOf('-') > -1) {
                return false;
            }
            if (e.which > 47 && e.which < 58 || e.which === 46 || e.which == 8)
            {
                if (e.which === 46 && value.indexOf('.') > -1) {
                    return false;
                }
                var value_array = value.split('.');
                if (value_array.length > 1) {
                    if (value_array[1].length === 2) {
                        if (doGetCaretPosition(this) > value_array[0].length) {
                            return false;
                        }
                    }
                }
                destroyTooltip(lfvh_jQuery(this));
            } else {
                return false;
            }

        });
        lfvh_jQuery('body').on('change', '#' + $uniqueFormID + ' .lf-select-single,#' + $uniqueFormID + ' .lf-select-other', function () {
            var req_field = $(this).attr('required');
            if (req_field === 'required' || req_field === 'true') {
                if (lfvh_jQuery.trim(lfvh_jQuery(this).val()) === '') {
                    setTooltip(lfvh_jQuery(this), 'Please select one option');
                } else {
                    destroyTooltip(lfvh_jQuery(this));
                }
            }
        });
        lfvh_jQuery('body').on('change','.terms',function(){
            if(lfvh_jQuery(this).is(':checked')){
                destroyTooltip(lfvh_jQuery(this).parents('label:first'));
            }
        });
        lfvh_jQuery('body').on('change', '#' + $uniqueFormID + ' .multi-select-box', function () {
            var element = lfvh_jQuery(this);

            var multiValues = element.val();
            element.find('option').each(function () {
                var optionElement = this;
                if (lfvh_jQuery.inArray(lfvh_jQuery(optionElement).val(), multiValues) > -1) {
                    lfvh_jQuery(optionElement).attr('selected', 'selected');
                }
            });

            var req_field = $(element).attr('required');
            if (req_field === 'required' || req_field === 'true') {
                if (element.val() === null) {
                    setTooltip(element, 'Please select one option');
                } else {
                    destroyTooltip(element);
                }
            }
        });
        lfvh_jQuery('body').delegate('#' + $uniqueFormID + ' .lf-city,#' + $uniqueFormID + ' .lf-address-line', 'blur', function () {
            var middle_condition = lfvh_jQuery(this).val().length < 1;
            if(lfvh_jQuery(this).hasClass('.lf-city')){
                middle_condition = (lfvh_jQuery(this).val().length < 3 || lfvh_jQuery(this).val().length > 25);
            }
            if (lfvh_jQuery(this).val() === '' || middle_condition ) {
                lfvh_jQuery(this).on("hidden.bs.tooltip",
                        function () {
                            lfvh_jQuery(this).css({"display": "", "position": "inherit", "top": 0, "left": 0});
                        });
                if (lfvh_jQuery(this).parents('#lf-add-form').length < 0) {
                    lfvh_jQuery(this).focus();
                }
            }
        });
        

        lfvh_jQuery('body').delegate('#' + $uniqueFormID + ' .lf-range-selector', 'change', function () {
            var value = lfvh_jQuery(this).attr('prefix') + " " + lfvh_jQuery(this).val() + " " + lfvh_jQuery(this).attr('postfix');
            lfvh_jQuery(this).nextAll('.slider-value:first').html(value);
        });
        lfvh_jQuery(document).delegate('#lf_' + form_embed_id + '_custom-question-answer-form .toggler .toggle-switch-class', 'click', function (e) {
            if (e.originalEvent !== undefined) {
                var toggler = lfvh_jQuery(this);
                var value1 = toggler.find('.toggle-label-first').text();
                var value2 = toggler.find('.toggle-label-second').text();
                if (toggler.hasClass('active')) {
                    toggler.removeClass('active');
                    toggler.find('.toggle-label-first').attr('style', 'display:none !important');
                    toggler.find('.toggle-label-second').attr('style', 'display:block !important');
                    toggler.find('.toggle-value').val(value1);
                    if(toggler.parents('.toggler').attr('version') !== undefined && toggler.parents('.toggler').attr('version') === '4'){
                        toggler.find('.toggle-value').val(value2);
                    }
                } else {
                    toggler.addClass('active');
                    toggler.find('.toggle-label-first').attr('style', 'display:block !important');
                    toggler.find('.toggle-label-second').attr('style', 'display:none !important');
                    toggler.find('.toggle-value').val(value2);
                    if(toggler.parents('.toggler').attr('version') !== undefined && toggler.parents('.toggler').attr('version') === '4'){
                        toggler.find('.toggle-value').val(value1);
                    }
                }
                //                lfvh_jQuery(this).click();
                lfvh_jQuery(this).trigger('click');
            }
        });
        lfvh_jQuery('body').delegate('#' + $uniqueFormID + ' .lf-select-other', 'change', function () {
            var required = '';
            if (lfvh_jQuery(this).attr('required') === 'required') {
                required = 'required="true"';
            }
            if (lfvh_jQuery(this).val() === 'lf_other') {
                if (lfvh_jQuery(this).next('.select-other-textarea').length < 1) {
                    lfvh_jQuery('<textarea id="' + lfvh_jQuery(this).attr('id') + '-other" ' + required + ' name="' + lfvh_jQuery(this).attr('id') + '" rows="5" class="select-other-textarea lf-form-fields" style="margin-top: 20px !important;width:60% !important;"></textarea>').insertAfter(this);
                }
            } else {
                lfvh_jQuery(this).nextAll('.select-other-textarea').first().remove();
            }
        });
        lfvh_jQuery('#' + $uniqueFormID + ' .lf-advance-image-selector .lf-icon-box>label').click(function () {
            if (lfvh_jQuery(this).prev('.lf-checkbox').attr('type') === 'radio') {
                lfvh_jQuery(this).prev('.lf-checkbox').prop('checked', true);
            }
            lfvh_jQuery(this).prev('.lf-checkbox').trigger('click');
            lfvh_jQuery('#' + $uniqueFormID + ' #lf_' + form_embed_id + '_custom-question-answer-form .submit-button').removeAttr('disabled');
        });
        lfvh_jQuery('body').delegate('#' + $uniqueFormID + ' .lf-advance-image-selector .lf-checkbox', 'click', function () {

            lfvh_jQuery(this).attr('checked', 'checked');

            // Removing validation & messages
            /* if (lfvh_jQuery(this).parents('.form').find('label.lf-error-label').nextAll('.answer-element:first').length > 0) { */
            if (lfvh_jQuery(this).parents('.lf-icon-area').find('label.lf-error-label').nextAll('.answer-element:first').length > 0) {
                destroyTooltip(lfvh_jQuery(this).parents('.form').find('label.lf-error-label').nextAll('.answer-element:first'));
            }

            if (lfvh_jQuery(this).attr('type') === 'radio') {
                lfvh_jQuery(this).parents('.lf-icon-area').find('.chkbox').removeClass('active');
                lfvh_jQuery(this).parents('.lf-icon-area').find('.lf-image-overlay-icon').removeClass('active');
                lfvh_jQuery(this).parents('.lf-icon-area').find('.overlay-icon-hover').show();
                lfvh_jQuery(this).parents('.lf-icon-area').find('.overlay-icon-active').hide();
            }
            if (lfvh_jQuery(this).is(':checked')) {
                lfvh_jQuery(this).next('label').find('.chkbox').addClass('active');
                lfvh_jQuery(this).next('label').find('.lf-image-overlay-icon').addClass('active');
                lfvh_jQuery(this).next('label').find('.overlay-icon-hover').hide();
                lfvh_jQuery(this).next('label').find('.overlay-icon-active').show();
                destroyTooltip(lfvh_jQuery(this).parents('.lf-advance-image-selector'));
            } else {
                lfvh_jQuery(this).next('label').find('.chkbox').removeClass('active');
                lfvh_jQuery(this).next('label').find('.lf-image-overlay-icon').removeClass('active');
                lfvh_jQuery(this).next('label').find('.overlay-icon-hover').show();
                lfvh_jQuery(this).next('label').find('.overlay-icon-active').hide();
            }
        });
        lfvh_jQuery(window).click(function (event) {
            if (!lfvh_jQuery(event.target).hasClass('telephone') && !lfvh_jQuery(event.target).hasClass('lf-currency')) {
                lfvh_jQuery('.lf-form-fields').removeClass('lf-form-field-focus');
            }
        });

        lfvh_jQuery('body').delegate('#' + $uniqueFormID + ' .lf-form-fields', 'click', function (event) {
            lfvh_jQuery('#' + $uniqueFormID + ' .lf-form-fields').removeClass('lf-form-field-focus');
            if (lfvh_jQuery(this).hasClass('lf-multiselect') || lfvh_jQuery(this).hasClass('intl-tel-input') || lfvh_jQuery(this).hasClass('input-symbol')) {
                lfvh_jQuery(this).addClass('lf-form-field-focus');
            }
        });
        document.body.addEventListener('touchstart', function (e) {}, false);
        /*
         * image click radio button get pressed
         */
        lfvh_jQuery('body').delegate('#' + $uniqueFormID + ' img', 'click', function () {
            lfvh_jQuery(this).prev('input[type="radio"]').prop('checked', true).click();

        });
        lfvh_jQuery('body').find('#' + $uniqueFormID + ' .lf-image-thumb img').each(function () {
            var height = lfvh_jQuery(this).attr('height');
            var width = lfvh_jQuery(this).attr('width');
            lfvh_jQuery(this).attr('style', 'width:' + width + 'px !important; height:' + height + 'px !important');
        });
        lfvh_jQuery('body').find('#' + $uniqueFormID + ' .telephone').each(function () {
            if (!lfvh_jQuery(this).is(":visible")) {
//                lfvh_jQuery(this).parents('.intl-tel-input').hide();
            } else {
                lfvh_jQuery(this).parents('.intl-tel-input').show();
            }
        });
        lfvh_jQuery('body').find('#' + $uniqueFormID + ' .slider-value').each(function () {
            if (lfvh_jQuery(this).prevAll('.lf-range-selector').is(':visible'))
            {
                lfvh_jQuery(this).show();
            } else {
                lfvh_jQuery(this).hide();
            }
        });
        lfvh_jQuery('body').delegate('#' + $uniqueFormID + ' #lf_' + form_embed_id + '_custom-question-answer-form .submit-button', 'click', function () {
            changeStep("submit", lfvh_jQuery(this), form_embed_id);
        });
        lfvh_jQuery('#' + $uniqueFormID + ' #lf_' + form_embed_id + '_custom-question-answer-form #lf_' + form_embed_id + '_html-form-tab-content').find('.step-buttons:not(.submit-button)').each(function () {
            var form = lfvh_jQuery(this).attr('data-value');
            lfvh_jQuery(this).attr("onclick", "changeStep('" + form + "', this, " + form_embed_id + ");");
        });

        // Hide the image title element if empty
        lfvh_jQuery('#' + $uniqueFormID + ' .lf-image-title-none').each(function () {
            if (lfvh_jQuery(this).html() === " " || lfvh_jQuery(this).html() === "&nbsp;") {
                lfvh_jQuery(this).addClass('hide').remove();
            }
        });

        try {

            if (!lfvh_jQuery('#lf_' + form_embed_id + '_lf-form-header').is(':visible')) {
                lfvh_jQuery('#lf_' + form_embed_id + '_lf-form-header').remove();
            } else {
                lfvh_jQuery('#lf_' + form_embed_id + '_lf-form-header').attr('id', 'lf_' + form_embed_id + '_lf-form-header');
                lfvh_jQuery('#lf_' + form_embed_id + '_lf-form-header_list').attr('id', 'lf_' + form_embed_id + '_lf-form-header_list');
            }

            if (!lfvh_jQuery('#lf_' + form_embed_id + '_lf-form-sub-header1').is(':visible')) {
                lfvh_jQuery('#lf_' + form_embed_id + '_lf-form-sub-header1').remove();
            } else {
                lfvh_jQuery('#lf_' + form_embed_id + '_lf-form-sub-header1').attr('id', 'lf_' + form_embed_id + '_lf-form-sub-header1');
                lfvh_jQuery('#lf_' + form_embed_id + '_lf-form-sub-header1_list').attr('id', 'lf_' + form_embed_id + '_lf-form-sub-header1_list');
            }

            if (!lfvh_jQuery('#lf_' + form_embed_id + '_lf-form-sub-header2').is(':visible')) {
                lfvh_jQuery('#lf_' + form_embed_id + '_lf-form-sub-header2').remove();
            } else {
                lfvh_jQuery('#lf_' + form_embed_id + '_lf-form-sub-header2').attr('id', 'lf_' + form_embed_id + '_lf-form-sub-header2');
                lfvh_jQuery('#lf_' + form_embed_id + '_lf-form-sub-header2_list').attr('id', 'lf_' + form_embed_id + '_lf-form-sub-header2_list');
            }
            lfvh_jQuery('li[element-type="0"]').remove();
        } catch (e) {
        }

        lfvh_jQuery('.removed-element').remove();

        if (lfvh_jQuery(document).find('.currency-symbol').length > 0) {
            currency(lfvh_jQuery('.currency-symbol'));
        }

        try {
            if (lfvh_jQuery(document).find('.multi-select-box').length > 0) {
                lfvh_jQuery('.multi-select-box').each(function () {
                    if (lfvh_jQuery(this).nextAll('.lf-multiselect').length === 0) {
                        lfvh_jQuery(this).find('option').each(function(){
                           lfvh_jQuery(this).val(lfvh_jQuery(this).html().replace(/&nbsp;/gi," ")); 
                        });
                    }
                });
                lfvh_jQuery('.multi-select-box').multiselect({numberDisplayed: 1, nonSelectedText: 'Please select here'});
                lfvh_jQuery('select[type="multiselect"]').each(function () {
                    var multiselect = lfvh_jQuery(this).next('.btn-group');
                    multiselect.attr({'id': lfvh_jQuery(this).attr('id')});
                    multiselect.addClass('lf-multiselect');
                    multiselect.addClass('lf-form-fields');
                });
            }
        } catch (e) {

        }
        lfvh_jQuery('body').on('click','.multiselect',function(e){
            if(lfvh_jQuery(this).parents('.lf-multiselect').hasClass('open')){
                lfvh_jQuery(this).parents('.lf-multiselect').removeClass('open');
            }else{
                lfvh_jQuery(this).parents('.lf-multiselect').addClass('open');
            }
            e.stopPropagation();
        });
        lfvh_jQuery('body').delegate('#' + $uniqueFormID + ' .lf-img-overlays,.lf-img-overlay', 'click', function () {
            if (!lfvh_jQuery(this).hasClass('overlay-color')) {
                lfvh_jQuery(this).prev('img').trigger('click');
                var icon = lfvh_jQuery(this).parents('.lf-image-selector-container').attr('overlay-icon-class');
                lfvh_jQuery(this).parents('.lf-image-selector-container').find('.lf-img-overlays,.lf-img-overlay').removeClass('active').html('<i class="' + icon + ' lf-image-overlay-icon"></i>');
                lfvh_jQuery(this).addClass('active');
                var active_icon = lfvh_jQuery(this).parents('.lf-image-selector-container').attr('active-overlay-icon-class');
                lfvh_jQuery(this).html('<i class="' + active_icon + ' lf-image-overlay-icon active"></i>');
            }
        });
        lfvh_jQuery('body').delegate('#' + $uniqueFormID + ' .lf-icon-box input[type="radio"]', 'click', function () {
            if (lfvh_jQuery(this).parents('.lf-image-selector-container').attr('next-step') === 'true') {
                if (lfvh_jQuery(this).parents('.form').next('.form').attr('id') !== undefined) {
                    var next_form = lfvh_jQuery(this).parents('.form').next('.form').attr('id').replace('lf_' + form_embed_id + '_html-', '');
                    changeStep(next_form, lfvh_jQuery(this), form_embed_id);
                }
            }
        });
        try {
            if (lfvh_jQuery(document).find('.lf-country').length > 0) {
                var country_fields = lfvh_jQuery('#'+$uniqueFormID).find('.lf-country');
                    country_states(lfvh_jQuery(country_fields));
            }
        } catch (e) {
            
        }

        try {

            if (lfvh_jQuery(document).find('#' + $uniqueFormID + ' .telephone').length > 0) {
                var country_code;
                try {
                    var config = {
                        autoFormat: true,
//                        preferredCountries: ["gb", "us", "in"],
                        preferredCountries: ["at"],
                        autoPlaceholder: true,
                        initialCountry: "auto",
                        nationalMode: false,
                        autoHideDialCode: false,
                        geoIpLookup: function (callback) {
                            lfvh_jQuery.get("//ipinfo.io", function () {}, "jsonp").always(function (resp) {
                                var countryCode = (resp && resp.country) ? resp.country : "";
                                callback(countryCode);
                                setTimeout(function(){
                                    if(!lfvh_jQuery('.lf-customize-form-container').length > 1){
                                        lfvh_jQuery('.telephone').focus();
                                    }
                                },100);
                            });
                        }
                    };
                    lfvh_jQuery(".telephone").intlTelInput(config);

                } catch (e) {
                }

            }

            lfvh_jQuery('body').find('#' + $uniqueFormID + ' .intl-tel-input').each(function () {
                var input_id = lfvh_jQuery(this).find('.telephone').attr('id');
                lfvh_jQuery(this).attr({'id': input_id + '-span'});
                lfvh_jQuery(this).addClass('lf-form-fields');
                lfvh_jQuery(this).find('.telephone').removeClass('lf-form-fields');
            });

            checkfields();
        } catch (e) {
        }
        try{
            lfvh_jQuery('.lf-form-container').each(function(){
                lfvh_jQuery(this).find('p').each(function(){
                    if(lfvh_jQuery(this).children().length === 0 && lfvh_jQuery(this).text() === ""){
                        lfvh_jQuery(this).remove();
                    }
                });
            });
        }catch(e){}
        progressBarWidth();
        
        /* Replace comman class `dropdown-menu` with `lf-dropdown-menu` */
        var classToRemove = "dropdown-menu";
        var classToAdd = "lf-dropdown-menu";
        replaceClass($uniqueFormID, classToRemove, classToAdd);
    };

    function country_states(_this) {
        // Function to get countries & states for address field
        var city_states = Object();
        //Africa
        city_states['Algeria'] = ['Algiers', 'Adrar', 'Ain Defla', 'Ain Temouchent', 'Alger', 'Annaba', 'Batna', 'Bechar', 'Bejaia', 'Biskra', 'Blida', 'Bordj Bou Arreridj', 'Bouira', 'Boumerdes', 'Chlef', 'Constantine', 'Djelfa', 'El Bayadh', 'El Oued', 'El Tarf', 'Ghardaia', 'Guelma', 'Illizi', 'Jijel', 'Khenchela', 'Laghouat', 'Mascara', 'Medea', 'Mila', 'Mostaganem', 'M\\Sila', 'Naama', 'Oran', 'Ouargla', 'Oum el Bouaghi', 'Relizane', 'Saida', 'Setif', 'Sidi Bel Abbes', 'Skikda', 'Souk Ahras', 'Tamanghasset', 'Tebessa', 'Tiaret', 'Tindouf', 'Tipaza', 'Tissemsilt', 'Tizi Ouzou', 'Tlemcen'];
        city_states['Angola'] = ['Luanda', 'Bengo', 'Benguela', 'Bie', 'Cabinda', 'Cuando Cubango', 'Cuanza Norte', 'Cuanza Sul', 'Cunene', 'Huambo', 'Huila', 'Lunda Norte', 'Lunda Sul', 'Malanje', 'Moxico', 'Namibe', 'Uige', 'Zaire'];
        city_states['Benin'] = ['Porto-Novo', 'Alibori', 'Atakora', 'Atlantique', 'Borgou', 'Collines', 'Couffo', 'Donga', 'Littoral', 'Mono', 'Oueme', 'Plateau', 'Zou'];
        city_states['Botswana'] = ['Gaborone', 'Central', 'Chobe', 'Francistown', 'Ghanzi', 'Kgalagadi', 'Kgatleng', 'Kweneng', 'Lobatse', 'Ngamiland', 'North-East', 'Selebi-Pikwe', 'South-East', 'Southern'];
        city_states['Burkina Faso'] = ['Ouagadougou', 'Bale', 'Bam', 'Banwa', 'Bazega', 'Bougouriba', 'Boulgou', 'Boulkiemde', 'Comoe', 'Ganzourgou', 'Gnagna', 'Gourma', 'Houet', 'Ioba', 'Kadiogo', 'Kenedougou', 'Komandjari', 'Kompienga', 'Kossi', 'Koupelogo', 'Kouritenga', 'Kourweogo', 'Leraba', 'Loroum', 'Mouhoun', 'Nahouri', 'Namentenga', 'Nayala', 'Naumbiel', 'Oubritenga', 'Oudalan', 'Passore', 'Poni', 'Samentenga', 'Sanguie', 'Seno', 'Sissili', 'Soum', 'Sourou', 'Tapoa', 'Tuy', 'Yagha', 'Yatenga', 'Ziro', 'Zondomo', 'Zoundweogo'];
        city_states['Burundi'] = ['Bujumbura', 'Bubanza', 'Bujumbura', 'Bururi', 'Cankuzo', 'Cibitoke', 'Gitega', 'Karuzi', 'Kayanza', 'Kirundo', 'Makamba', 'Muramvya', 'Muyinga', 'Mwaro', 'Ngozi', 'Rutana', 'Ruyigi'];
        city_states['Cameroon'] = ['Yaounde', 'Adamaoua', 'Centre', 'Est', 'Extreme-Nord', 'Littoral', 'Nord', 'Nord-Ouest', 'Ouest', 'Sud', 'Sud-Ouest'];
        city_states['Cape Verde'] = ['Praia', 'Boa Vista', 'Brava', 'Calheta', 'Maio', 'Mosteiros', 'Paul', 'Porto Novo', 'Ribeira Grande', 'Sal', 'Santa Catarina', 'Santa Cruz', 'Sao Domingos', 'Sao Nicolau', 'Sao Filipe', 'Sao Vicente', 'Tarrafal'];
        city_states['Central African Republic'] = ['Bangui', 'Bamingui-Bangoran', 'Basse-Kotto', 'Gribingui', 'Haute-Kotto', 'Haute-Sangha', 'Haut-Mbomou', 'Kemo-Gribingui', 'Lobaye', 'Mbomou', 'Nana-Mambere', 'Ombella-Mpoko', 'Ouaka', 'Ouham', 'Ouham-Pende', 'Sangha', 'Vakaga'];
        city_states['Chad'] = ['N\\Djamena', 'Assongha', 'Baguirmi', 'Bahr El Gazal', 'Bahr Koh', 'Batha Oriental', 'Batha Occidental', 'Biltine', 'Borkou', 'Dababa', 'Ennedi', 'Guera', 'Hadjer Lamis', 'Kabia', 'Kanem', 'Lac', 'Lac Iro', 'Logone Occidental', 'Logone Oriental', 'Mandoul', 'Mayo-Boneye', 'Mayo-Dallah', 'Monts de Lam', 'Ouaddai', 'Salamat', 'Sila', 'Tandjile Oriental', 'Tandjile Occidental', 'Tibesti'];
        city_states['Congo Dem.'] = ['Kinshasa', 'Bandundu', 'Bas-Congo', 'Equateur', 'Kasai-Occidental', 'Kasai-Oriental', 'Katanga', 'Maniema', 'Nord-Kivu', 'Orientale', 'Sud-Kivu'];
        city_states['Congo Rep.'] = ['Brazzaville', 'Bouenza', 'Cuvette', 'Kouilou', 'Lekoumou', 'Likouala', 'Niari', 'Plateaux', 'Pool', 'Sangha'];
        city_states['Djibouti'] = ['Djibouti', '\\Ali Sabih', 'Dikhil', 'Obock', 'Tadjoura'];
        city_states['Egypt'] = ['Cairo', 'Ad Daqahliyah', 'Al Bahr al Ahmar', 'Al Buhayrah', 'Al Fayyum', 'Al Gharbiyah', 'Al Iskandariyah', 'Al Isma\\iliyah', 'Al Jizah', 'Al Minufiyah', 'Al Minya', 'Al Qahirah', 'Al Qalyubiyah', 'Al Wadi al Jadid', 'Ash Sharqiyah', 'As Suways', 'Aswan', 'Asyut', 'Bani Suwayf', 'Bur Sa\\id', 'Dumyat', 'Janub Sina\\', 'Kafr ash Shaykh', 'Matruh', 'Qina', 'Shamal Sina\\', 'Suhaj'];
        city_states['Equatorial Guinea'] = ['Malabo', 'Annobon', 'Bioko Norte', 'Bioko Sur', 'Centro Sur', 'Kie-Ntem', 'Litoral', 'Wele-Nzas'];
        city_states['Eritrea'] = ['Asmara', 'Central', 'Anelba', 'Southern Red Sea', 'Northern Red Sea', 'Southern', 'Gash-Barka'];
        city_states['Ethiopia'] = ['Addis Ababa', 'Adis Abeba (Addis Ababa)', 'Afar', 'Amara', 'Binshangul Gumuz', 'Dire Dawa', 'Gambela Hizboch', 'Hareri Hizb', 'Oromiya', 'Sumale (Somali)', 'Tigray', 'YeDebub Biheroch Bihereseboch...'];
        city_states['Gabon'] = ['Libreville'];
        city_states['Gambia'] = ['Estuaire', 'Haut-Ogooue', 'Moyen-Ogooue', 'Ngounie', 'Nyanga', 'Ogooue-Ivindo', 'Ogooue-Lolo', 'Ogooue-Maritime', 'Woleu-Ntem'];
        city_states['Ghana'] = ['Accra', 'Ashanti', 'Brong-Ahafo', 'Central', 'Eastern', 'Northern', 'Upper East', 'Upper West', 'Volta', 'Western'];
        city_states['Guinea'] = ['Conakry', 'Beyla', 'Boffa', 'Boke', 'Coyah', 'Dabola', 'Dalaba', 'Dinguiraye', 'Dubreka', 'Faranah', 'Forecariah', 'Fria', 'Gaoual', 'Gueckedou', 'Kankan', 'Kerouane', 'Kindia', 'Kissidougou', 'Koubia', 'Koundara', 'Kouroussa', 'Labe', 'Lelouma', 'Lola', 'Macenta', 'Mali', 'Mamou', 'Mandiana', 'Nzerekore', 'Pita', 'Siguiri', 'Telimele', 'Tougue', 'Yomou'];
        city_states['Guinea-Bissau'] = ['Bissau', 'Bafata', 'Biombo', 'Bolama/Bijagos', 'Cacheu', 'Gabu', 'Oio', 'Quinara', 'Tombali'];
        city_states['Kenya'] = ['Nairobi', 'Central', 'Coast', 'Eastern', 'Nairobi Area', 'North Eastern', 'Nyanza', 'Rift Valley', 'Western'];
        city_states['Lesotho'] = ['Maseru', 'Berea', 'Butha-Buthe', 'Leribe', 'Mafeteng', 'Mohales Hoek', 'Mokhotlong', 'Qacha\\s Nek', 'Quthing', 'Thaba-Tseka'];
        city_states['Liberia'] = ['Monrovia', 'Bomi', 'Bong', 'Gparbolu', 'Grand Bassa', 'Grand Cape Mount', 'Grand Gedeh', 'Grand Kru', 'Lofa', 'Margibi', 'Maryland', 'Montserrado', 'Nimba', 'River Cess', 'River Gee', 'Sinoe'];
        city_states['Libya'] = ['Tripoli', 'Ajdabiya', 'Al \\Aziziyah', 'Al Fatih', 'Al Jabal al Akhdar', 'Al Jufrah', 'Al Khums', 'Al Kufrah', 'An Nuqat al Khams', 'Ash Shati\\', 'Awbari', 'Az Zawiyah', 'Banghazi', 'Darnah', 'Ghadamis', 'Gharyan', 'Misratah', 'Murzuq', 'Sabha', 'Sawfajjin', 'Surt', 'Tarabulus', 'Tarhunah', 'Tubruq', 'Yafran', 'Zlitan'];
        city_states['Madagascar'] = ['Antananarivo', 'Antsiranana', 'Fianarantsoa', 'Mahajanga', 'Toamasina', 'Toliara'];
        city_states['Malawi'] = ['Lilongwe', 'Balaka', 'Blantyre', 'Chikwawa', 'Chiradzulu', 'Chitipa', 'Dedza', 'Dowa', 'Karonga', 'Kasungu', 'Likoma', 'Machinga (Kasupe)', 'Mangochi', 'Mchinji', 'Mulanje', 'Mwanza', 'Mzimba', 'Ntcheu', 'Nkhata Bay', 'Nkhotakota', 'Nsanje', 'Ntchisi', 'Phalombe', 'Rumphi', 'Salima', 'Thyolo', 'Zomba'];
        city_states['Mali'] = ['Bamako', 'Gao', 'Kayes', 'Kidal', 'Koulikoro', 'Mopti', 'Segou', 'Sikasso', 'Tombouctou'];
        city_states['Mauritania'] = ['Nouakchott', 'Adrar', 'Assaba', 'Brakna', 'Dakhlet Nouadhibou', 'Gorgol', 'Guidimaka', 'Hodh Ech Chargui', 'Hodh El Gharbi', 'Inchiri', 'Tagant', 'Tiris Zemmour', 'Trarza'];
        city_states['Mauritius'] = ['Port Louis', 'Agalega Islands', 'Black River', 'Cargados Carajos Shoals', 'Flacq', 'Grand Port', 'Moka', 'Pamplemousses', 'Plaines Wilhems', 'Riviere du Rempart', 'Rodrigues', 'Savanne'];
        city_states['Morocco'] = ['Rabat', 'Ad Dakhla (Oued Eddahab)', 'Agadir', 'Al Hoceima', 'Azilal', 'Beni Mellal', 'Ben Slimane', 'Boujdour', 'Boulemane', 'Casablanca', 'Chaouen', 'El Jadida', 'El Kelaa des Sraghna', 'Er Rachidia', 'Essaouira', 'Es Smara', 'Fes', 'Figuig', 'Guelmim', 'Ifrane', 'Kenitra', 'Khemisset', 'Khenifra', 'Khouribga', 'Laayoune', 'Larache', 'Marrakech', 'Meknes', 'Nador', 'Ouarzazate', 'Oujda', 'Safi', 'Settat', 'Sidi Kacem', 'Tanger', 'Tan-Tan', 'Taounate', 'Taroudannt', 'Tata', 'Taza', 'Tetouan', 'Tiznit'];
        city_states['Mozambique'] = ['Maputo', 'Cabo Delgado', 'Gaza', 'Inhambane', 'Manica', 'Maputo', 'Nampula', 'Niassa', 'Sofala', 'Tete', 'Zambezia'];
        city_states['Namibia'] = ['Windhoek', 'Caprivi', 'Erongo', 'Hardap', 'Karas', 'Khomas', 'Kunene', 'Ohangwena', 'Okavango', 'Omaheke', 'Omusati', 'Oshana', 'Oshikoto', 'Otjozondjupa'];
        city_states['Niger'] = ['Niamey', 'Agadez', 'Diffa', 'Dosso', 'Maradi', 'Tahoua', 'Tillaberi', 'Zinder'];
        city_states['Nigeria'] = ['Abuja', 'Abia', 'Adamawa', 'Akwa Ibom', 'Anambra', 'Bauchi', 'Bayelsa', 'Benue', 'Borno', 'Cross River', 'Delta', 'Ebonyi', 'Edo', 'Ekiti', 'Enugu', 'Gombe', 'Imo', 'Jigawa', 'Kaduna', 'Kano', 'Katsina', 'Kebbi', 'Kogi', 'Kwara', 'Lagos', 'Nassarawa', 'Niger', 'Ogun', 'Ondo', 'Osun', 'Oyo', 'Plateau', 'Rivers', 'Sokoto', 'Taraba', 'Yobe', 'Zamfara'];
        city_states['Rwanda'] = ['Kigali', 'Butare', 'Byumba', 'Cyangugu', 'Gikongoro', 'Gisenyi', 'Gitarama', 'Kibungo', 'Kibuye', 'Ruhengeri', 'Umutara'];
        city_states['Sao Tome-Principe'] = ['Sao Tome', 'Principe'];
        city_states['Senegal'] = ['Dakar', 'Diourbel', 'Fatick', 'Kaolack', 'Kolda', 'Louga', 'Matam', 'Saint-Louis', 'Tambacounda', 'Thies', 'Ziguinchor'];
        city_states['Seychelles'] = ['Victoria', 'Anse aux Pins', 'Anse Boileau', 'Anse Etoile', 'Anse Louis', 'Anse Royale', 'Baie Lazare', 'Baie Sainte Anne', 'Beau Vallon', 'Bel Air', 'Bel Ombre', 'Cascade', 'Glacis', 'Grand\\ Anse (on Mahe)', 'Grand\\ Anse (on Praslin)', 'La Digue', 'La Riviere Anglaise', 'Mont Buxton', 'Mont Fleuri', 'Plaisance', 'Pointe La Rue', 'Port Glaud', 'Saint Louis', 'Takamaka'];
        city_states['Sierra Leone'] = ['Freetown', 'Eastern', 'Northern', 'Southern', 'Western'];
        city_states['Somalia'] = ['Mogadishu', 'Awdal', 'Bakool', 'Banaadir', 'Bari', 'Bay', 'Galguduud', 'Gedo', 'Hiiraan', 'Jubbada Dhexe', 'Jubbada Hoose', 'Mudug', 'Nugaal', 'Sanaag', 'Shabeellaha Dhexe', 'Shabeellaha Hoose', 'Sool', 'Togdheer', 'Woqooyi Galbeed'];
        city_states['South Africa'] = ['Pretoria', 'Eastern Cape', 'Free State', 'Gauteng', 'KwaZulu-Natal', 'Mpumalanga', 'North-West', 'Northern Cape', 'Northern Province/Limpopo', 'Western Cape'];
        city_states['Sudan'] = ['Khartoum', 'A\\ali an Nil', 'Al Bahr al Ahmar', 'Al Buhayrat', 'Al Jazirah', 'Al Khartum', 'Al Qadarif', 'Al Wahdah', 'An Nil al Abyad', 'An Nil al Azraq', 'Ash Shamaliyah', 'Bahr al Jabal', 'Gharb al Istiwa\\iyah', 'Gharb Bahr al Ghazal', 'Gharb Darfur', 'Gharb Kurdufan', 'Janub Darfur', 'Janub Kurdufan', 'Junqali', 'Kassala', 'Nahr an Nil', 'Shamal Bahr al Ghazal', 'Shamal Darfur', 'Shamal Kurdufan', 'Sharq al Istiwa\\iyah', 'Sinnar', 'Warab'];
        city_states['Swaziland'] = ['Lobamba/Mbabane', 'Hhohho', 'Lubombo', 'Manzini', 'Shiselweni'];
        city_states['Tanzania'] = ['Dodoma', 'Arusha', 'Dar es Salaam', 'Iringa', 'Kagera', 'Kigoma', 'Kilimanjaro', 'Lindi', 'Mara', 'Mbeya', 'Morogoro', 'Mtwara', 'Mwanza', 'Pemba North', 'Pemba South', 'Pwani', 'Rukwa', 'Ruvuma', 'Shinyanga', 'Singida', 'Tabora', 'Tanga', 'Zanzibar Central/South', 'Zanzibar North', 'Zanzibar Urban/West'];
        city_states['Togo'] = ['Lome', 'De La Kara', 'Des Plateaux', 'Des Savanes', 'Centrale', 'Maritime'];
        city_states['Tunisia'] = ['Tunis', 'Ariana', 'Beja', 'Ben Arous', 'Bizerte', 'El Kef', 'Gabes', 'Gafsa', 'Jendouba', 'Kairouan', 'Kasserine', 'Kebili', 'Mahdia', 'Medenine', 'Monastir', 'Nabeul', 'Sfax', 'Sidi Bou Zid', 'Siliana', 'Sousse', 'Tataouine', 'Tozeur', 'Zaghouan'];
        city_states['Uganda'] = ['Kampala', 'Adjumani', 'Apac', 'Arua', 'Bugiri', 'Bundibugyo', 'Bushenyi', 'Busia', 'Gulu', 'Hoima', 'Iganga', 'Jinja', 'Kabale', 'Kabarole', 'Kaberamaido', 'Kalangala', 'Kamuli', 'Kamwenge', 'Kanungu', 'Kapchorwa', 'Kasese', 'Katakwi', 'Kayunga', 'Kibale', 'Kiboga', 'Kisoro', 'Kitgum', 'Kotido', 'Kumi', 'Kyenjojo', 'Lira', 'Luwero', 'Masaka', 'Masindi', 'Mayngc', 'Mbale', 'Mbarara', 'Moroto', 'Moyo', 'Mpigi', 'Mubende', 'Mukono', 'Nakapiripiti', 'Nakasongola', 'Nebbi', 'Ntungamo', 'Pader', 'Pallisa', 'Rakai', 'Rukungiri', 'Sembabule', 'Sironko', 'Soroti', 'Tororo', 'Wakiso', 'Yumbe'];
        city_states['Zambia'] = ['Lusaka', 'Central', 'Copperbelt', 'Eastern', 'Luapula', 'Lusaka', 'Northern', 'North-Western', 'Southern', 'Western'];
        city_states['Zimbabwe'] = ['Harare', 'Bulawayo', 'Manicaland', 'Mashonaland Central', 'Mashonaland East', 'Mashonaland West', 'Masvingo', 'Matabeleland North', 'Matabeleland South', 'Midlands'];
        //Asia
        city_states['Bangladesh'] = ['Dhaka', 'Barisal', 'Chittagong', 'Khulna', 'Rajshahi', 'Sylhet'];
        city_states['Bhutan'] = ['Thimphu', 'Bumthang', 'Chhukha', 'Chirang', 'Dagana', 'Gasa', 'Geylegphug', 'Ha', 'Lhuntshi', 'Mongar', 'Paro', 'Pemagatsel', 'Punakha', 'Samchi', 'Samdrup Jongkhar', 'Shemgang', 'Tashigang', 'Tongsa', 'Wangdi Phodrang', 'Yangtse'];
        city_states['Brunei'] = ['Bandar Seri Begawan', 'Belait', 'Brunei/Muara', 'Temburong', 'Tutong'];
        city_states['Burma-Myanmar'] = ['Rangoon', 'Ayeyarwady', 'Bago', 'Chin', 'Kachin', 'Kayin', 'Kayah', 'Magway', 'Mandalay', 'Mon', 'Rakhine', 'Sagaing', 'Shan', 'Tanintharyi', 'Yangon'];
        city_states['Cambodia'] = ['Phnom Penh', 'Banteay Mean Cheay', 'Batdambang', 'Kampong Cham', 'Kampong Chhnang', 'Kampong Spoe', 'Kampong Thum', 'Kampot', 'Kandal', 'Kaoh Kong', 'Keb', 'Kracheh', 'Mondol Kiri', 'Otdar Mean Cheay', 'Pailin', 'Pouthisat', 'Preah Seihanu (Sihanoukville)', 'Preah Vihear', 'Prey Veng', 'Rotanah Kiri', 'Siem Reab', 'Stoeng Treng', 'Svay Rieng', 'Takev'];
        city_states['China'] = ['Beijing', 'Anhui', 'Chongqing', 'Fujian', 'Gansu', 'Guangdong', 'Guangxi', 'Guizhou', 'Hainan', 'Hebei', 'Heilongjiang', 'Henan', 'Hubei', 'Hunan', 'Jiangsu', 'Jiangxi', 'Jilin', 'Liaoning', 'Nei Mongol', 'Ningxia', 'Qinghai', 'Shaanxi', 'Shandong', 'Shanghai', 'Shanxi', 'Sichuan', 'Tianjin', 'Xinjiang', 'Xizang (Tibet)', 'Yunnan', 'Zhejiang'];
        city_states['East Timor'] = ['Dili', 'Aileu', 'Ainaro', 'Baucau', 'Bobonaro (Maliana)', 'Cova-Lima (Suai)', 'Ermera', 'Lautem (Los Palos)', 'Liquica', 'Manatuto', 'Manufahi (Same)', 'Oecussi (Ambeno)', 'Viqueque'];
        city_states['India'] = ['New Delhi', 'Andaman/Nicobar Islands', 'Andhra Pradesh', 'Arunachal Pradesh', 'Assam', 'Bihar', 'Chandigarh', 'Chhattisgarh', 'Dadra/Nagar Haveli', 'Daman/Diu', 'Goa', 'Gujarat', 'Haryana', 'Himachal Pradesh', 'Jammu/Kashmir', 'Jharkhand', 'Karnataka', 'Kerala', 'Lakshadweep', 'Madhya Pradesh', 'Maharashtra', 'Manipur', 'Meghalaya', 'Mizoram', 'Nagaland', 'Orissa', 'Pondicherry', 'Punjab', 'Rajasthan', 'Sikkim', 'Tamil Nadu', 'Tripura', 'Uttaranchal', 'Uttar Pradesh', 'West Bengal'];
        city_states['Indonesia'] = ['Jakarta', 'Aceh', 'Bali', 'Banten', 'Bengkulu', 'Gorontalo', 'Jakarta Raya', 'Jambi', 'Jawa Barat', 'Jawa Tengah', 'Jawa Timur', 'Kalimantan Barat', 'Kalimantan Selatan', 'Kalimantan Tengah', 'Kalimantan Timur', 'Kepulauan Bangka Belitung', 'Lampung', 'Maluku', 'Maluku Utara', 'Nusa Tenggara Barat', 'Nusa Tenggara Timur', 'Papua', 'Riau', 'Sulawesi Selatan', 'Sulawesi Tengah', 'Sulawesi Tenggara', 'Sulawesi Utara', 'Sumatera Barat', 'Sumatera Selatan', 'Sumatera Utara', 'Yogyakarta'];
        city_states['Japan'] = ['Tokyo', 'Aichi', 'Akita', 'Aomori', 'Chiba', 'Ehime', 'Fukui', 'Fukuoka', 'Fukushima', 'Gifu', 'Gumma', 'Hiroshima', 'Hokkaido', 'Hyogo', 'Ibaraki', 'Ishikawa', 'Iwate', 'Kagawa', 'Kagoshima', 'Kanagawa', 'Kochi', 'Kumamoto', 'Kyoto', 'Mie', 'Miyagi', 'Miyazaki', 'Nagano', 'Nagasaki', 'Nara', 'Niigata', 'Oita', 'Okayama', 'Okinawa', 'Osaka', 'Saga', 'Saitama', 'Shiga', 'Shimane', 'Shizuoka', 'Tochigi', 'Tokushima', 'Tokyo', 'Tottori', 'Toyama', 'Wakayama', 'Yamagata', 'Yamaguchi', 'Yamanashi'];
        city_states['Kazakhstan'] = ['Astana', 'Almaty', 'Almaty', 'Aqmola', 'Aqtobe', 'Astana', 'Atyrau', 'Batys Qazaqstan', 'Bayqongyr', 'Mangghystau', 'Ongtustik Qazaqstan', 'Pavlodar', 'Qaraghandy', 'Qostanay', 'Qyzylorda', 'Shyghys Qazaqstan', 'Soltustik Qazaqstan', 'Zhambyl'];
        city_states['Korea-north'] = ['P\\yongyang', 'Chagang-do', 'Hamgyong-bukto', 'Hamgyong-namdo', 'Hwanghae-bukto', 'Hwanghae-namdo', 'Kaesong-si', 'Kangwon-do', 'Najin Sonbong-si', 'Namp\\o-si', 'P\\yongan-bukto', 'P\\yongan-namdo', 'P\\yongyang-si', 'Yanggang-do'];
        city_states['Korea-south'] = ['Seoul', 'Cheju-do', 'Cholla-bukto', 'Cholla-namdo', 'Ch\\ungch\\ong-bukto', 'Ch\\ungch\\ong-namdo', 'Inch\\on-gwangyoksi', 'Kangwon-do', 'Kwangju-gwangyoksi', 'Kyonggi-do', 'Kyongsang-bukto', 'Kyongsang-namdo', 'Pusan-gwangyoksi', 'Soul-t\\ukpyolsi', 'Taegu-gwangyoksi', 'Taejon-gwangyoksi', 'Ulsan-gwangyoksi'];
        city_states['Laos'] = ['Vientiane', 'Attapu', 'Bokeo', 'Bolikhamxai', 'Champasak', 'Houaphan', 'Khammouan', 'Louangnamtha', 'Louangphabang', 'Oudomxai', 'Phongsali', 'Salavan', 'Savannakhet', 'Viangchan', 'Viangchan', 'Xaignabouli', 'Xaisomboun', 'Xekong', 'Xiangkhoang'];
        city_states['Malaysia'] = ['Kuala Lumpur', 'Johor', 'Kedah', 'Kelantan', 'Labuan', 'Melaka', 'Negeri Sembilan', 'Pahang', 'Perak', 'Perlis', 'Pulau Pinang', 'Putrajaya', 'Sabah', 'Sarawak', 'Selangor', 'Terengganu', 'Wilayah Persekutuan'];
        city_states['Maldives'] = ['Maale', 'Alifu', 'Baa', 'Dhaalu', 'Faafu', 'Gaafu Alifu', 'Gaafu Dhaalu', 'Gnaviyani', 'Haa Alifu', 'Haa Dhaalu', 'Kaafu', 'Laamu', 'Lhaviyani', 'Meemu', 'Noonu', 'Raa', 'Seenu', 'Shaviyani', 'Thaa', 'Vaavu'];
        city_states['Mongolia'] = ['Ulaanbaatar', 'Arhangay', 'Bayanhongor', 'Bayan-Olgiy', 'Bulgan', 'Darhan Uul', 'Dornod', 'Dornogovi', 'Dundgovi', 'Dzavhan', 'Govi-Altay', 'Govi-Sumber', 'Hentiy', 'Hovd', 'Hovsgol', 'Omnogovi', 'Orhon', 'Ovorhangay', 'Selenge', 'Suhbaatar', 'Tov', 'Uvs'];
        city_states['Nepal'] = ['Kathmandu', 'Bagmati', 'Bheri', 'Dhawalagiri', 'Gandaki', 'Janakpur', 'Karnali', 'Kosi', 'Lumbini', 'Mahakali', 'Mechi', 'Narayani', 'Rapti', 'Sagarmatha', 'Seti'];
        city_states['Philippines'] = ['Manila', 'Oriental', 'North Cotabato', 'Northern Samar', 'Nueva Ecija', 'Nueva Vizcaya', 'Olongapo', 'Ormoc', 'Oroquieta', 'Ozamis', 'Pagadian', 'Palawan', 'Palayan', 'Pampanga', 'Pangasinan', 'Pasay', 'Puerto Princesa', 'Quezon', 'Quezon City', 'Quirino', 'Rizal', 'Romblon', 'Roxas', 'Samar', 'San Carlos (Negros Occidental)', 'San Carlos (Pangasinan)', 'San Jose', 'San Pablo', 'Silay', 'Siquijor', 'Sorsogon', 'South Cotabato', 'Southern Leyte', 'Sultan Kudarat', 'Sulu', 'Surigao', 'Surigao del Norte', 'Surigao del Sur', 'Tacloban', 'Tagaytay', 'Tagbilaran', 'Tangub', 'Tarlac', 'Tawi-Tawi', 'Toledo', 'Trece Martires', 'Zambales', 'Zamboanga', 'Zamboanga del Norte', 'Zamboanga del Sur'];
        city_states['Russian Federation'] = ['Moskva (Moscow)', 'Adygeya (Maykop)', 'Aginskiy Buryatskiy (Aginskoye)', 'Altay (Gorno-Altaysk)', 'Altayskiy (Barnaul)', 'Amurskaya (Blagoveshchensk)', 'Arkhangel\\skaya', 'Astrakhanskaya', 'Bashkortostan (Ufa)', 'Belgorodskaya', 'Bryanskaya', 'Buryatiya (Ulan-Ude)', 'Chechnya (Groznyy)', 'Chelyabinskaya', 'Chitinskaya', 'Chukotskiy (Anadyr\\)', 'Chuvashiya (Cheboksary)', 'Dagestan (Makhachkala)', 'Evenkiyskiy (Tura)', 'Ingushetiya (Nazran\\)', 'Irkutskaya', 'Ivanovskaya', 'Kabardino-Balkariya (Nal\\chik)', 'Kaliningradskaya', 'Kalmykiya (Elista)', 'Kaluzhskaya', 'Kamchatskaya (Petropavlovsk-Kamchatskiy)', 'Karachayevo-Cherkesiya (Cherkessk)', 'Kareliya (Petrozavodsk)', 'Kemerovskaya', 'Khabarovskiy', 'Khakasiya (Abakan)', 'Khanty-Mansiyskiy (Khanty-Mansiysk)', 'Kirovskaya', 'Komi (Syktyvkar)', 'Koryakskiy (Palana)', 'Kostromskaya', 'Krasnodarskiy', 'Krasnoyarskiy', 'Kurganskaya', 'Kurskaya', 'Leningradskaya', 'Lipetskaya', 'Magadanskaya', 'Mariy-El (Yoshkar-Ola)', 'Mordoviya (Saransk)', 'Moskovskaya', 'Murmanskaya', 'Nenetskiy (Nar\\yan-Mar)', 'Nizhegorodskaya', 'Novgorodskaya', 'Novosibirskaya', 'Omskaya', 'Orenburgskaya', 'Orlovskaya (Orel)', 'Penzenskaya', 'Permskaya', 'Komi-Permyatskiy (Kudymkar)', 'Primorskiy (Vladivostok)', 'Pskovskaya', 'Rostovskaya', 'Ryazanskaya', 'Sakha (Yakutiya)', 'Sakhalinskaya (Yuzhno-Sakhalinsk)', 'Samarskaya', 'Sankt-Peterburg (Saint Petersburg)', 'Saratovskaya', 'Severnaya Osetiya-Alaniya [North Ossetia] (Vladikavkaz)', 'Smolenskaya', 'Stavropol\\skiy', 'Sverdlovskaya (Yekaterinburg)', 'Tambovskaya', 'Tatarstan (Kazan\\)', 'Taymyrskiy (Dudinka)', 'Tomskaya', 'Tul\\skaya', 'Tverskaya', 'Tyumenskaya', 'Tyva (Kyzyl)', 'Udmurtiya (Izhevsk)', 'Ul\\yanovskaya', 'Ust\\-Ordynskiy Buryatskiy (Ust\\-Ordynskiy)', 'Vladimirskaya', 'Volgogradskaya', 'Vologodskaya', 'Voronezhskaya', 'Yamalo-Nenetskiy (Salekhard)', 'Yaroslavskaya', 'Yevreyskaya'];
        city_states['Singapore'] = [''];
        city_states['Sri Lanka'] = ['Colombo', 'Central', 'North Central', 'Northern', 'Eastern', 'North Western', 'Sabaragamuwa', 'Southern', 'Uva', 'Western'];
        city_states['Taiwan'] = ['Taipei', 'Chang-hua', 'Chia-i', 'Chi-lung', 'Chung-hsing-hsin-ts\\un', 'Hsin-chu', 'Hua-lien', 'I-lan', 'Kao-hsiung', 'Miao-li', 'Nan-t\\ou', 'P\\eng-hu', 'P\\ing-tung', 'T\\ai-chung', 'T\\ai-nan', 'T\\ai-pei', 'T\\ai-tung', 'T\\ao-yuan/Yun-lin'];
        city_states['Thailand'] = ['Bangkok', 'Amnat Charoen', 'Ang Thong', 'Buriram', 'Chachoengsao', 'Chai Nat', 'Chaiyaphum', 'Chanthaburi', 'Chiang Mai', 'Chiang Rai', 'Chon Buri', 'Chumphon', 'Kalasin', 'Kamphaeng Phet', 'Kanchanaburi', 'Khon Kaen', 'Krabi', 'Lampang', 'Lamphun', 'Loei', 'Lop Buri', 'Mae Hong Son', 'Maha Sarakham', 'Mukdahan', 'Nakhon Nayok', 'Nakhon Pathom', 'Nakhon Phanom', 'Nakhon Ratchasima', 'Nakhon Sawan', 'Nakhon Si Thammarat', 'Nan', 'Narathiwat', 'Nong Bua Lamphu', 'Nong Khai', 'Nonthaburi', 'Pathum Thani', 'Pattani', 'Phangnga', 'Phatthalung', 'Phayao', 'Phetchabun', 'Phetchaburi', 'Phichit', 'Phitsanulok', 'Phra Nakhon Si Ayutthaya', 'Phrae', 'Phuket', 'Prachin Buri', 'Prachuap Khiri Khan', 'Ranong', 'Ratchaburi', 'Rayong', 'Roi Et', 'Sa Kaeo', 'Sakon Nakhon', 'Samut Prakan', 'Samut Sakhon', 'Samut Songkhram', 'Sara Buri', 'Satun', 'Sing'];
        city_states['Vietnam'] = ['Hanoi', 'An Giang', 'Bac Giang', 'Bac Kan', 'Bac Lieu', 'Bac Ninh', 'Ba Ria-Vung Tau', 'Ben Tre', 'Binh Dinh', 'Binh Duong', 'Binh Phuoc', 'Binh Thuan', 'Ca Mau', 'Can Tho', 'Cao Bang', 'Dac Lak', 'Da Nang', 'Dong Nai', 'Dong Thap', 'Gia Lai', 'Ha Giang', 'Hai Duong', 'Hai Phong', 'Ha Nam', 'Ha Noi', 'Ha Tay', 'Ha Tinh', 'Hoa Binh', 'Ho Chi Minh', 'Hung Yen', 'Khanh Hoa', 'Kien Giang', 'Kon Tum', 'Lai Chau', 'Lam Dong', 'Lang Son', 'Lao Cai', 'Long An', 'Nam Dinh', 'Nghe An', 'Ninh Binh', 'Ninh Thuan', 'Phu Tho', 'Phu Yen', 'Quang Binh', 'Quang Nam', 'Quang Ngai', 'Quang Ninh', 'Quang Tri', 'Soc Trang', 'Son La', 'Tay Ninh', 'Thai Binh', 'Thai Nguyen', 'Thanh Hoa', 'Thua Thien-Hue', 'Tien Giang', 'Tra Vinh', 'Tuyen Quang', 'Vinh Long', 'Vinh Phuc', 'Yen Bai'];
        //Australia-Oceania
        city_states['Australia'] = ['Canberra', 'Australian Capital Territory', 'New South Wales', 'Northern Territory', 'Queensland', 'South Australia', 'Tasmania', 'Victoria', 'Western Australia'];
        city_states['Fiji'] = ['Suva', 'Central', 'Eastern', 'Northern', 'Rotuma', 'Western'];
        city_states['Kiribati'] = ['Tarawa', 'Abaiang', 'Abemama', 'Aranuka', 'Arorae', 'Banaba', 'Beru', 'Butaritari', 'Gilberts (Central)', 'Gilberts (Northern)', 'Gilberts (Southern)', 'Kanton', 'Kiritimati', 'Kuria', 'Line Islands', 'Maiana', 'Makin', 'Marakei', 'Nikunau', 'Nonouti', 'Onotoa', 'Phoenix Islands', 'Tabiteuea', 'Tabuaeran', 'Tamana', 'Teraina'];
        city_states['Micronesia'] = ['Palikir', 'Chuuk (Truk)', 'Kosrae', 'Pohnpei', 'Yap'];
        city_states['Nauru'] = ['Yaren', 'Aiwo', 'Anabar', 'Anetan', 'Anibare', 'Baiti', 'Boe', 'Buada', 'Denigomodu', 'Ewa', 'Ijuw', 'Meneng', 'Nibok', 'Uaboe'];
        city_states['New Zealand'] = ['Wellington', 'Akaroa', 'Amuri', 'Ashburton', 'Auckland', 'Banks Peninsula', 'Bay of Islands', 'Bay of Plenty', 'Bruce', 'Buller', 'Canterbury', 'Carterton', 'Chatham Islands', 'Cheviot', 'Christchurch', 'Clifton', 'Clutha', 'Cook', 'Dannevirke', 'Dunedin', 'Egmont', 'Eketahuna', 'Ellesmere', 'Eltham', 'Eyre', 'Far North', 'Featherston', 'Franklin', 'Gisborne', 'Golden Bay', 'Gore', 'Great Barrier Island', 'Grey', 'Hamilton', 'Hastings', 'Hauraki Plains', 'Hawera', 'Hawke\\s Bay', 'Heathcote', 'Hikurangi', 'Hobson', 'Hokianga', 'Horowhenua', 'Hurunui', 'Hutt', 'Inangahua', 'Inglewood', 'Invercargill', 'Kaikoura', 'Kaipara', 'Kairanga', 'Kapiti Coast', 'Kawerau', 'Kiwitea', 'Lake', 'Mackenzie', 'Malvern', 'Manaia', 'Manawatu', 'Mangonui', 'Maniototo', 'Manukau', 'Marlborough', 'Masterton', 'Matamata', 'Matamata Piako', 'Mount Herbert', 'Napier', 'Nelson', 'Nelson', 'New Plymouth', 'Northland', 'North Shore', 'Ohinemuri', 'Opotiki', 'Oroua', 'Otago', 'Otamatea', 'Otorohanga', 'Oxford', 'Palmerston North', 'Pahiatua', 'Papakura', 'Paparua', 'Patea', 'Piako', 'Pohangina', 'Porirua', 'Queenstown Lakes', 'Raglan', 'Rangiora', 'Rangitikei', 'Rodney', 'Rotorua', 'Ruapehu', 'Runanga', 'Saint Kilda', 'Selwyn', 'Silverpeaks', 'Southland', 'South Taranaki', 'South Waikato', 'South Wairarapa', 'Stewart Island', 'Stratford', 'Strathallan', 'Taranaki', 'Tararua', 'Tasman', 'Taumarunui', 'Taupo', 'Tauranga', 'Thames Coromandel', 'Timaru', 'Tuapeka', 'Upper Hutt', 'Vincent', 'Waiapu', 'Waiheke', 'Waihemo', 'Waikato', 'Waikohu', 'Waimairi', 'Waimarino', 'Waimate', 'Waimate West', 'Waimea', 'Waipa', 'Waipawa', 'Waipukurau', 'Wairarapa South', 'Wairewa', 'Wairoa', 'Waitakere', 'Waitaki', 'Waitomo', 'Waitotara', 'Wallace', 'Wanganui', 'Wanganui-Manawatu', 'Waverley', 'West Coast', 'Western Bay of Plenty', 'Westland', 'Whakatane', 'Whangarei', 'Whangaroa', 'Woodville'];
        city_states['Palau'] = ['Koror', 'Aimeliik', 'Airai', 'Angaur', 'Hatobohei', 'Kayangel', 'Melekeok', 'Ngaraard', 'Ngarchelong', 'Ngardmau', 'Ngatpang', 'Ngchesar', 'Ngeremlengui', 'Ngiwal', 'Peleliu', 'Sonsoral'];
        city_states['Papua New Guinea'] = ['Port Moresby', 'Bougainville', 'Central', 'Chimbu', 'Eastern Highlands', 'East New Britain', 'East Sepik', 'Enga', 'Gulf', 'Madang', 'Manus', 'Milne Bay', 'Morobe', 'National Capital', 'New Ireland', 'Northern', 'Sandaun', 'Southern Highlands', 'Western', 'Western Highlands', 'West New Britain'];
        city_states['Samoa'] = ['Apia', 'A\\ana', 'Aiga-i-le-Tai', 'Atua', 'Fa\\asaleleaga', 'Gaga\\emauga', 'Gagaifomauga', 'Palauli', 'Satupa\\itea', 'Tuamasaga', 'Va\\a-o-Fonoti', 'Vaisigano'];
        city_states['Tonga'] = ['Nuku\\alofa', 'Ha\\apai', 'Tongatapu', 'Vava\\u'];
        city_states['Tuvalu'] = ['Fongafale'];
        city_states['Vanuatu'] = ['Port-Vila', 'Malampa', 'Penama', 'Sanma', 'Shefa', 'Tafea', 'Torba'];
        //Caribbean
        city_states['Anguilla'] = ['The Valley'];
        city_states['Antigua-Barbuda'] = ['Saint John', 'Barbuda', 'Redonda', 'Saint George', 'Saint Mary', 'Saint Paul', 'Saint Peter', 'Saint Philip'];
        city_states['Aruba'] = ['Oranjestad'];
        city_states['Bahamas'] = ['Nassau', 'Acklins/Crooked Islands', 'Bimini', 'Cat Island', 'Exuma', 'Freeport', 'Fresh Creek', 'Governor\\s Harbour', 'Green Turtle Cay', 'Harbour Island', 'High Rock', 'Inagua', 'Kemps Bay', 'Long Island', 'Marsh Harbour', 'Mayaguana', 'New Providence', 'Nichollstown/Berry Islands', 'Ragged Island', 'Rock Sound', 'Sandy Point', 'San Salvador/Rum Cay'];
        city_states['Barbados'] = ['Bridgetown', 'Christ Church', 'Saint Andrew', 'Saint George', 'Saint James', 'Saint John', 'Saint Joseph', 'Saint Lucy', 'Saint Michael', 'Saint Peter', 'Saint Philip', 'Saint Thomas'];
        city_states['Cuba'] = ['Havana', 'Camaguey', 'Ciego de Avila', 'Cienfuegos', 'Ciudad de La Habana', 'Granma', 'Guantanamo', 'Holguin', 'Isla de la Juventud', 'La Habana', 'Las Tunas', 'Matanzas', 'Pinar del Rio', 'Sancti Spiritus', 'Santiago de Cuba', 'Villa Clara'];
        city_states['Dominica'] = ['Roseau', 'Saint Andrew', 'Saint David', 'Saint George', 'Saint John', 'Saint Joseph', 'Saint Luke', 'Saint Mark', 'Saint Patrick', 'Saint Paul', 'Saint Peter'];
        city_states['Dominican Republic'] = ['Santo Domingo', 'Azua', 'Baoruco', 'Barahona', 'Dajabon', 'Distrito Nacional', 'Duarte', 'Elias Pina', 'El Seibo', 'Espaillat', 'Hato Mayor', 'Independencia', 'La Altagracia', 'La Romana', 'La Vega', 'Maria Trinidad Sanchez', 'Monsenor Nouel', 'Monte Cristi', 'Monte Plata', 'Pedernales', 'Peravia', 'Puerto Plata', 'Salcedo', 'Samana', 'Sanchez Ramirez', 'San Cristobal', 'San Juan', 'San Pedro de Macoris', 'Santiago', 'Santiago Rodriguez', 'Valverde'];
        city_states['Grenada'] = ['Saint George\\s', 'Carriacou/Petit Martinique', 'Saint Andrew', 'Saint David', 'Saint John', 'Saint Mark', 'Saint Patrick'];
        city_states['Guadeloupe'] = ['Basse-Terre'];
        city_states['Haiti'] = ['Port-au-Prince', 'Artibonite', 'Centre', 'Grand \\Anse', 'Nord', 'Nord-Est', 'Nord-Ouest', 'Ouest', 'Sud', 'Sud-Est'];
        city_states['Jamaica'] = ['Kingston', 'Clarendon', 'Hanover', 'Manchester', 'Portland', 'Saint Andrew', 'Saint Ann', 'Saint Catherine', 'Saint Elizabeth', 'Saint James', 'Saint Mary', 'Saint Thomas', 'Trelawny', 'Westmoreland'];
        city_states['Martinique'] = ['Fort-de-France'];
        city_states['Montserrat'] = ['Brades Estate', 'Plymouth', 'Saint Anthony', 'Saint Georges', 'Saint Peter'];
        city_states['Netherlands Antilles'] = ['Willemstad'];
        city_states['Puerto Rico'] = ['San Juan', 'Adjuntas', 'Aguada', 'Aguadilla', 'Aguas Buenas', 'Aibonito', 'Anasco', 'Arecibo', 'Arroyo', 'Barceloneta', 'Barranquitas', 'Bayamon', 'Cabo Rojo', 'Caguas', 'Camuy', 'Canovanas', 'Carolina', 'Catano', 'Cayey', 'Ceiba', 'Ciales', 'Cidra', 'Coamo', 'Comerio', 'Corozal', 'Culebra', 'Dorado', 'Fajardo', 'Florida', 'Guanica', 'Guayama', 'Guayanilla', 'Guaynabo', 'Gurabo', 'Hatillo', 'Hormigueros', 'Humacao', 'Isabela', 'Jayuya', 'Juana Diaz', 'Juncos', 'Lajas', 'Lares', 'Las Marias', 'Las Piedras', 'Loiza', 'Luquillo', 'Manati', 'Maricao', 'Maunabo', 'Mayaguez', 'Moca', 'Morovis', 'Naguabo', 'Naranjito', 'Orocovis', 'Patillas', 'Penuelas', 'Ponce', 'Quebradillas', 'Rincon', 'Rio Grande', 'Sabana Grande', 'Salinas', 'San German', 'San Lorenzo', 'San Sebastian', 'Santa Isabel', 'Toa Alta', 'Toa Baja', 'Trujillo Alto', 'Utuado', 'Vega Alta', 'Vega Baja', 'Vieques', 'Villalba', 'Yabucoa', 'Yauco'];
        city_states['Sent Barts'] = [''];
        city_states['Sent Kitts-Nevis'] = ['Basseterre', 'Christ Church Nichola Town', 'Sent Anne Sandy Point', 'Sent George Basseterre', 'Sent George Gingerland', 'Sent James Windward', 'Sent John Capesterre', 'Sent John Figtree', 'Sent Mary Cayon', 'Sent Paul Capesterre', 'Sent Paul Charlestown', 'Sent Peter Basseterre', 'Sent Thomas Lowland', 'Sent Thomas Middle Island', 'Trinity Palmetto Point'];
        city_states['Sent Lucia'] = ['Castries', 'Anse-la-Raye', 'Castries', 'Choiseul', 'Dauphin', 'Dennery', 'Gros-Islet', 'Laborie', 'Micoud', 'Praslin', 'Soufriere', 'Vieux-Fort'];
        city_states['Sent Martin-Sint Maarten'] = [''];
        city_states['St Vincent-Grenadines'] = ['Kingstown', 'Charlotte', 'Grenadines', 'Saint Andrew', 'Saint David', 'Saint George', 'Saint Patrick'];
        city_states['San Andres'] = [''];
        city_states['Trinidad-Tobago'] = ['Port-of-Spain', 'Arima', 'Caroni', 'Mayaro', 'Nariva', 'Saint Andrew', 'Saint David', 'Saint George', 'Saint Patrick', 'San Fernando', 'Tobago', 'Victoria'];
        city_states['Turks-Caicos'] = ['Grand Turk (Cockburn Town)'];
        //Central America
        city_states['Belize'] = ['Belmopan', 'Belize', 'Cayo', 'Corozal', 'Orange Walk', 'Stann Creek', 'Toledo'];
        city_states['Costa Rica'] = ['San Jose', 'Alajuela', 'Cartago', 'Guanacaste', 'Heredia', 'Limon', 'Puntarenas'];
        city_states['El Salvador'] = ['San Salvador', 'Ahuachapan', 'Cabanas', 'Chalatenango', 'Cuscatlan', 'La Libertad', 'La Paz', 'La Union', 'Morazan', 'San Miguel', 'Santa Ana', 'San Vicente', 'Sonsonate', 'Usulutan'];
        city_states['Guatemala'] = ['Guatemala', 'Alta Verapaz', 'Baja Verapaz', 'Chimaltenango', 'Chiquimula', 'El Progreso', 'Escuintla', 'Guatemala', 'Huehuetenango', 'Izabal', 'Jalapa', 'Jutiapa', 'Peten', 'Quetzaltenango', 'Quiche', 'Retalhuleu', 'Sacatepequez', 'San Marcos', 'Santa Rosa', 'Solola', 'Suchitepequez', 'Totonicapan', 'Zacapa'];
        city_states['Honduras'] = ['Tegucigalpa', 'Atlantida', 'Choluteca', 'Colon', 'Comayagua', 'Copan', 'Cortes', 'El Paraiso', 'Francisco Morazan', 'Gracias a Dios', 'Intibuca', 'Islas de la Bahia', 'La Paz', 'Lempira', 'Ocotepeque', 'Olancho', 'Santa Barbara', 'Valle', 'Yoro'];
        city_states['Nicaragua'] = ['Managua', 'Boaco', 'Carazo', 'Chinandega', 'Chontales', 'Esteli', 'Granada', 'Jinotega', 'Leon', 'Madriz', 'Managua', 'Masaya', 'Matagalpa', 'Nueva Segovia', 'Rio San Juan', 'Rivas', 'Atlantico Norte', 'Atlantico Sur'];
        city_states['Panama'] = ['Panama', 'Bocas del Toro', 'Chiriqui', 'Cocle', 'Colon', 'Darien', 'Herrera', 'Los Santos', 'San Blas', 'Veraguas'];
        //Islands
        city_states['Arctic Ocean'] = ['Franz Josef Land', 'Svalbard'];
        city_states['Atlantic Ocean-North'] = ['Alderney', 'Azores', 'Baixo', 'Belle-Ile', 'Bermuda', 'Bioko', 'Block', 'Boa Vista', 'Borduy', 'Bugio', 'Canary Islands', 'Cape Breton', 'Cape Verde Islands', 'Channel Islands', 'Corvo', 'Deer Isle', 'Eysturoy', 'Faeroe Islands', 'Fago', 'Faial', 'Flores', 'Fuerteventura', 'Fugloy', 'Gomera', 'Graciosa', 'Gran Canaria', 'Grand Manan', 'Grande', 'Greenland', 'Guernsey', 'Hebrides', 'Herm', 'Hestur', 'Hierro', 'Iceland', 'Iles De La Madeleine', 'Ile de Noirmoutier', 'Ile de\\ Re', 'Ile d\\ OlÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ron', 'Ile d\\ Yeu', 'Ilhas Desertas', 'Ireland', 'Isle au Haut', 'Isle of Lewis', 'Isle of Mull', 'Isle of Skye', 'Jersey', 'Kalsoy', 'Koltur', 'Kunoy', 'Lanzarote', 'La Palma', 'Litla Dimun', 'Long Island', 'Jan Mayen', 'Madeira Islands', 'Maio', 'Martha\\s Vineyard', 'Matinicus', 'Monhegan', 'Mount Desert', 'Mykines', 'Nantucket Island', 'Newfoundland', 'Nolsoy', 'Orkney Islands', 'Pico', 'Porto Santo', 'Prince Edward Island', 'Sent Peter/Sent Paul Rocks', 'Sent-Pierre/Miquelon', 'Praia', 'Sable Island', 'Sal', 'Sandoy', 'Santo Antao', 'Santa Maria', 'Sao Jorge', 'Sao Miguel', 'Sao Nicolau', 'Sao Tiago', 'Sao Tome/Principe', 'Sao Vicente', 'Sark', 'Scilly Isles', 'Shetland Islands', 'Skuvoy', 'Stora Dimun', 'Streymoy', 'Sumba', 'Svinoy', 'Swans', 'Tenerife', 'Terceira', 'Uist Islands', 'Vagar', 'Viday', 'Vinalhaven'];
        city_states['Atlantic Ocean-South'] = ['Amsterdam', 'Andaman Islands', 'Annobon', 'Ascension', 'Bouvet', 'Falkland Islands', 'Gough', 'Martin Vas Islands', 'Nightingale', 'Sent Helena', 'Shag/Black Rocks', 'South Georgia', 'South Orkney Islands', 'South Sandwich Islands', 'Traversay', 'Trindade', 'Tristan da Cunha'];
        city_states['Assorted'] = ['Akimiski', 'Aland', 'Alcatraz', 'Apostle Islands', 'Baffin', 'Banka', 'Banks', 'Beaver', 'Belcher Islands', 'Belitung', 'Borneo', 'Bornholm', 'Brac', 'Coats', 'Cres', 'Devon', 'East Frisian Islands', 'Ellesmere', 'Fyn', 'Galveston', 'Gotland', 'Groote Eylandt', 'Hiiumaa', 'Hong Kong Island', 'Ile d\\ Anticosti', 'Ile d\\ Orleans', 'Isla de Ometepe', 'Isla Del Ray', 'Isle of Man', 'Isle of Wight', 'Isle Royale', 'Jutland', 'Key Largo', 'Key West', 'King William', 'Krek', 'Langeland', 'Lantau', 'Lolland', 'Lundy', 'Mackinac', 'Madeleine Islands', 'Manhattan Island', 'Manitoulin', 'Marsh', 'Matagorda', 'Melville', 'North Hero', 'Oland', 'Paracel Islands', 'Pelee', 'Prince Charles', 'Prince of Wales', 'Queen Elizabeth Islands', 'Saaremaa', 'Sjaelland', 'Somerset', 'Southhampton', 'South Hero', 'Spratley Islands', 'Sulawesi', 'Victoria', 'Washington', 'Wellesley Islands'];
        city_states['Caribbean Sea'] = ['Abaco (great)', 'Abaco (little)', 'Acklins', 'Andros', 'Anegada', 'Anguilla', 'Antigua', 'Aruba', 'Bahamas', 'Barbados', 'Barbuda', 'Bimini Islands', 'Bonaire', 'Caicos Islands', 'Cat', 'Cayman Brac', 'Cayman Islands', 'Cozumel', 'Crooked', 'Cuba', 'Curacao', 'Dominica', 'Exuma', 'Grand Bahama', 'Grand Cayman', 'Grand Turk', 'Greater Antilles', 'Great Inagua', 'Grenada', 'Guadeloupe', 'Hispaniola (Haiti/DOR)', 'Isla de Margarita', 'Isla Mujeres', 'Isla La Tortuga', 'Isle of Youth', 'Jamaica', 'Lesser Antilles', 'Little Cayman', 'Little Inagua', 'Long', 'Marie-Galante', 'Martinique', 'Mayaguana', 'Montserrat', 'Navassa', 'Nevis', 'New Providence', 'Providencia', 'Puerto Rico', 'Roatan', 'Rum Cay', 'Sent Barts', 'Sent Croix', 'Sent Eustatius', 'Sent John', 'Sent Kitts', 'Sent Lucia', 'Sent Martin/Sint Maartan', 'Sent Thomas', 'St Vincent and the Grenadines', 'Saba', 'San Blas Islands', 'San Salvador', 'San Andres', 'Santa Catilina (Sent Catherine)', 'Tobago', 'Tortola', 'Trinidad', 'Virgin Gorda', 'West Indies'];
        city_states['Greek Isles'] = ['Aegina', 'Alonissos', 'Amorgos', 'Andros', 'Angistri', 'Astipalea', 'Carpathos', 'Cephalonia', 'Chios (Hios)', 'Corfu', 'Cos (Kos)', 'Crete (Kriti)', 'Cyclades Islands', 'Dodecanese Islands', 'Dokos', 'Eubaea (Evia)', 'Evia', 'Hydra', 'Ikaria', 'Ionian Islands', 'Ios', 'Ithaca', 'Kea', 'Kefalonia', 'Kefalos', 'Kalimnos', 'Kassos', 'Kithnos', 'Kos', 'Kythnos', 'Kythria', 'Lefkada', 'Lemnos', 'Leros', 'Lesvos', 'Leucas', 'Limnos', 'Lipsi', 'Los', 'Melos', 'Mykonos', 'Naxos', 'Nisyros', 'Paros', 'Patmos', 'Poros', 'Pothia', 'Rhodes (Rodos)', 'Salamina', 'Samos', 'Samothrace', 'Santorini', 'Serifos', 'Seriphos', 'Sifnos', 'Sikinos', 'Skiros', 'Skiathos', 'Skopelos', 'Skyros', 'Spetses', 'Sporades Islands', 'Syros', 'Tenos (Tinos)', 'Thassos', 'Tzia', 'Zakinthos', 'Zante'];
        city_states['Indian Ocean'] = ['Addu Atoll', 'Agalega Islands', 'Amsterdam', 'Andaman Islands', 'Anjouan (Nzwani)', 'Ari Atoll', 'Ashmore/Cartier Islands', 'Bali', 'Barrow', 'Bathurst', 'Bompoka', 'Cape Barren', 'Car Nicobar', 'Chagos Archipelago', 'Christmas', 'Comoros', 'Crozet Islands', 'Danger', 'Diego Garcia', 'Eagle Islands', 'Egmont Islands', 'Faadhippolhu Atoll', 'Felidhoo Atoll', 'Flinders', 'Goidhoo Atoll', 'Grand Comore (Njazidja)', 'Great Nicobar', 'Hadhdhunmathee', 'Heard', 'Huvadhoo Atoll', 'Ihavandhippolhu Atoll', 'Java', 'Kangaroo', 'Katchall', 'Keeling Islands (Cocos)', 'King', 'Kolhumadulu Atoll', 'Lakshadweep Islands', 'Little Andaman', 'Little Nicobar', 'Lower Andaman', 'Maalhosmadulu Atoll', 'Maamakunudhoo Atoll', 'Madagascar', 'Mahe', 'Maldives', 'Male\\ Atoll', 'Mauritius', 'Mayotte', 'McDonald Islands', 'Melville', 'Middle Andaman', 'Miladhunmafulu Atoll', 'Moheli (Mwali)', 'Molaku Atoll', 'Nancowry', 'Nelsons Island', 'Nias', 'Nicobar Islands', 'Nilandhoo Atoll', 'North Andaman', 'Peros Banhos', 'Phuket', 'Prince Edward Islands', 'Reunion', 'Rodrigues', 'Sent Paul', 'Salomon Islands', 'Seychelles', 'Shag', 'Siberut', 'Simeulue', 'Sipura', 'Socotra', 'Sumatra', 'Sri Lanka', 'Tarasa Dwip', 'Tasmania', 'Thiladhunmathee Atoll', 'Three Brothers', 'Timor', 'Tromelin', 'Zanzibar'];
        city_states['Mediterranean Sea'] = ['Aeolian Islands', 'Alboran', 'Balearic Islands', 'Cabrera', 'Capraia', 'Capri', 'Corse (Corsica)', 'Cyprus', 'Elba', 'Formentera', 'Gozo', 'Ibiza (Ivisa)', 'Iles d\\ Hyeres', 'Jalitah', 'Lampedusa', 'Lipari Islands', 'Mallorca (Majorca)', 'Malta', 'Maltese Islands', 'Menorca (Minorca)', 'Pantelleria', 'Ponziane', 'Salina', 'Sant\\ Antioca', 'San Pietro', 'Sardinia (Sardegna)', 'Sicily (Sicilia)', 'Stromboli', 'Vulcano', 'Zembra'];
        city_states['Oceania'] = ['Abaiang', 'Admiralty Islands', 'Aitutaki', 'Alofi', 'Ambrym', 'American Samoa', 'Antipodes', 'Atafu Atoll', 'Atiu', 'Auckland Islands', 'Aunu\\u', 'Austral Islands', 'Banaba', 'Bega', 'Bora Bora', 'Bougainville', 'Bounty Islands', 'Campbell', 'Chatham Islands', 'Choiseul', 'Cook Islands', 'Coral Sea Islands', 'Efate', 'Elao', 'Erromango', 'Espiritu Santo', '\\ Eua', 'Faioa', 'Fakaofo Atoll', 'Fatu Hiva', 'Fiji', 'French Polynesia', 'Funafuti Atoll', 'Futuna', 'Gambier Islands', 'Gau', 'Gilbert Islands', 'Gizo', 'Grand Terre', 'Great Barrier Reef', 'Guadacanal', 'Ha\\apai Island Group', 'Hatutu', 'Hiva Oa', 'Horne Islands', 'Huahine', 'Isle of Pines', 'Kadavu', 'Karkar', 'Kioa', 'Kiribati', 'Kiritamati', 'Koro', 'Lakeba', 'Lau Group', 'Lifou', 'Line Islands', 'Loyalty Islands', 'Malaita', 'Malekula', 'Malolo', 'Mangaia', 'Manihiki', 'Manu\\a Group', 'Manuae', 'Mare', 'Marquises Islands', 'Mata Utu', 'Matuku', 'Mauke', 'Maupiti', 'Melanesia', 'Mitiaro', 'Moala', 'Mohotani', 'Moorea', 'Nairai', 'Nanumea Atoll', 'Nassau', 'Nauru', 'Naviti', 'Nepean', 'New Britain', 'New Caledonia', 'New Georgia Islands', 'New Guinea', 'New Ireland', 'Niuafo\\ou', 'Niuas Islands', 'Niuatoputapu', 'Niue', 'Niulakita Atoll', 'Nomuka Island Group', 'Norfolk Islands', 'Nukuaeta', 'Nukufetau Atoll', 'Nuku Hiva', 'Nukulaelae Atoll', 'Nukunono Atoll', 'Ofu', 'Olasega', 'Ono', 'Ouvea', 'Ovalau', 'Palmerston', 'Pangai', 'Penrhyn', 'Philip', 'Phoenix Islands', 'Pitcairn', 'Pitt Island', 'Polynesia', 'Pukapuka', 'Rabi', 'Raiatea', 'Rakahanga', 'Rangiroa', 'Rarotonga', 'Rotuma', 'Samao', 'San Cristobal', 'Santa Cruz Islands', 'Santa Isabel', 'Savai \\i', 'Society Islands', 'Solomon Islands', 'Stewart', 'Suwarrow', 'Tabuaeran', 'Tahaa', 'Tahiti', 'Tahuata', 'Taiohae', 'Tanna', 'Tarawa', 'Tasmania', 'Tau', 'Taveuni', 'Tetiaroa', 'Tokelau', 'Tonga', 'Tongatapu', 'Totoya', 'Tuamotu Islands', 'Tubuai', 'Tupai', 'Tutuila', 'Tuvalu', 'Ua Huka', 'Ua Pou', 'Hiva Oa', 'Upolu', '\\ Uta Vava\\u', 'Uvea', 'Vaiaku', 'Vanua Balavu', 'Vanua Levu', 'Vanuatu', 'Vatulele', 'Vava\\u Island Group', 'Vita Levu', 'Wallis Islands', 'Wallis and Futuna', 'Waya', 'Yasawa', 'Yasawa Group'];
        city_states['Pacific Ocean-North'] = ['Aleutian Islands', 'Alexander Islands', 'Andreanof Islands', 'Babelthuap', 'Baker', 'Bikini', 'Bohol', 'Bonin Islands', 'Cabras', 'Caroline Islands', 'Cebu', 'Channel Islands (US)', 'Cheju Do', 'Chuuk', 'Diomede Islands', 'Guam', 'Hainan', 'Hawaii (big island)', 'Hawaiian Islands', 'Hokkaido', 'Honshu', 'Howland', 'Jaluit Atoll', 'Japan', 'Johnston Atoll', 'Kahoolawe', 'Kauai', 'Kodiak', 'Kosrae', 'Kwajalein Atoll', 'Kyushu', 'Lanai', 'Lifou', 'Loyalty Islands', 'Luzon', 'Maloelap Atoll', 'Majuro Atoll', 'Mare', 'Marshall Islands', 'Maui', 'Micronesia', 'Midway Islands', 'Mili Atoll', 'Mindanao', 'Mindoro', 'Molakai', 'Niihau', 'Near Islands', 'Negros', 'Northern Marianas', 'Nunivak', 'Oahu', 'Okinawa', 'Ostrov Sakhalin', 'Pagan', 'Palau', 'Palawan', 'Palmyra Atoll', 'Panay', 'Philippines', 'Pohnpei', 'Queen Charlotte Islands', 'Rat', 'Rongelap Atoll', 'Sent Lawrence', 'Sent Matthew', 'Sent Paul', 'Saipan', 'Samar', 'San Clemente', 'San Miguel', 'San Nicolas', 'Santa Catalina', 'Santa Cruz', 'Santa Rosa', 'Shikoku', 'Taiwan', 'Tinian', 'Vancouver', 'Volcano Islands', 'Wake Island', 'Yap'];
        city_states['Pacific Ocean-South'] = ['Easter', 'Galapogos Islands', 'Juan Fernandez Islands', 'Isla Espanola', 'Isla Fernandina', 'Isla Genovesa', 'Isla Isabella', 'Isla Marchena', 'Isla Pinta', 'Isla Puna', 'Isla San Cristobal', 'Isla San Salvador', 'Isla Santa Cruz', 'Isla Santa Maria', 'Robinson Crusoe', 'San Felix', 'Santa Clara'];
        //Europe
        city_states['Albania'] = ['Tirana', 'Berat', 'Bulqize', 'Delvine', 'Devoll', 'Diber', 'Durres', 'Elbasan', 'Fier', 'Gjirokaster', 'Gramsh', 'Has', 'Kavaje', 'Kolonje', 'Korce', 'Kruje', 'Kucove', 'Kukes', 'Kurbin', 'Lezhe', 'Librazhd', 'Lushnje', 'Malesi e Madhe', 'Mallakaster', 'Mat', 'Mirdite', 'Peqin', 'Permet', 'Pogradec', 'Puke', 'Sarande', 'Shkoder', 'Skrapar', 'Tepelene', 'Tirane', 'Tropoje', 'Vlore'];
        city_states['Andorra'] = ['Andorra la Vella', 'Canillo', 'Encamp', 'La Massana', 'Escaldes-Engordany', 'Ordino', 'Sant Julia de Loria'];
        city_states['Austria'] = ['Vienna', 'Burgenland', 'Kaernten', 'Niederoesterreich', 'Oberoesterreich', 'Salzburg', 'Steiermark', 'Tirol', 'Vorarlberg', 'Wien'];
        city_states['Belarus'] = ['Minsk', 'Brest', 'Homyel\\', 'Horad Minsk', 'Hrodna', 'Mahilyow', 'Vitsyebsk'];
        city_states['Belgium'] = ['Brussels', 'Antwerpen', 'Brabant Wallon', 'Brussels (Bruxelles)', 'Hainaut', 'Liege', 'Limburg', 'Luxembourg', 'Namur', 'Oost-Vlaanderen', 'Vlaams-Brabant', 'West-Vlaanderen'];
        city_states['Bosnia-Herzegovina'] = ['Sarajevo'];
        city_states['Bulgaria'] = ['Sofiya', 'Blagoevgrad', 'Burgas', 'Dobrich', 'Gabrovo', 'Khaskovo', 'Kurdzhali', 'Kyustendil', 'Lovech', 'Montana', 'Pazardzhik', 'Pernik', 'Pleven', 'Plovdiv', 'Razgrad', 'Ruse', 'Shumen', 'Silistra', 'Sliven', 'Smolyan', 'Sofiya-Grad', 'Stara Zagora', 'Turgovishte', 'Varna', 'Veliko Turnovo', 'Vidin', 'Vratsa', 'Yambol'];
        city_states['Croatia'] = ['Zagreb', 'Bjelovarsko-Bilogorska', 'Brodsko-Posavska', 'Dubrovacko-Neretvanska', 'Istarska', 'Karlovacka', 'Koprivnicko-Krizevacka', 'Krapinsko-Zagorska', 'Licko-Senjska', 'Medimurska', 'Osjecko-Baranjska', 'Pozesko-Slavonska', 'Primorsko-Goranska', 'Sibensko-Kninska', 'Sisacko-Moslavacka', 'Splitsko-Dalmatinska', 'Varazdinska', 'Viroviticko-Podravska', 'Vukovarsko-Srijemska', 'Zadarska', 'Zagrebacka'];
        city_states['Czech Republic'] = ['Prague (Praha)', 'Jihocesky', 'Jihomoravsky', 'Karlovarsky', 'Kralovehradecky', 'Liberecky', 'Moravskoslezsky', 'Olomoucky', 'Pardubicky', 'Plzensky', 'Stredocesky', 'Ustecky', 'Vysocina', 'Zlinsky'];
        city_states['Denmark'] = ['Copenhagen (Kobenhavn)', 'Arhus', 'Bornholm', 'Fredericksberg', 'Frederiksborg', 'Fyn', 'Kobenhavns', 'Nordjylland', 'Ribe', 'Ringkobing', 'Roskilde', 'Sonderjylland', 'Storstrom', 'Vejle', 'Vestsjalland', 'Viborg'];
        city_states['Estonia'] = ['Harjumaa (Tallinn)', 'Hiiumaa (Kardla)', 'Ida-Virumaa (Johvi)', 'Jarvamaa (Paide)', 'Jogevamaa (Jogeva)', 'Laanemaa (Haapsalu)', 'Laane-Virumaa (Rakvere)', 'Parnumaa (Parnu)', 'Polvamaa (Polva)', 'Raplamaa (Rapla)', 'Saaremaa (Kuressaare)', 'Tartumaa (Tartu)', 'Valgamaa (Valga)', 'Viljandimaa (Viljandi)', 'Vorumaa (Voru)'];
        city_states['Finland'] = ['Helsinki', 'Aland', 'Etela-Suomen Laani', 'Ita-Suomen Laani', 'Lansi-Suomen Laani', 'Lappi', 'Oulun Laani'];
        city_states['France'] = ['Paris', 'Alsace', 'Aquitaine', 'Auvergne', 'Basse-Normandie', 'Bourgogne', 'Bretagne', 'Centre', 'Champagne-Ardenne', 'Corse', 'Franche-Comte', 'Haute-Normandie', 'Ile-de-France', 'Languedoc-Roussillon', 'Limousin', 'Lorraine', 'Midi-Pyrenees', 'Nord-Pas-de-Calais', 'Pays de la Loire', 'Picardie', 'Poitou-Charentes', 'Provence-Alpes-Cote d\\Azur', 'Rhone-Alpes'];
        city_states['Georgia'] = ['T\\bilisi', 'Bat\\umi', 'Chiat\\ura', 'Gori', 'Guria', 'Imereti', 'Kakheti', 'K\\ut\\aisi', 'Kvemo Kartli', 'Mtskheta-Mtianeti', 'P\\ot\\i', 'Racha-Lechkhumi/Kvemo Svaneti', 'Rust\\avi', 'Samegrelo/Zemo Svaneti', 'Samtskhe-Javakheti', 'Shida Kartli', 'Sokhumi', 'Tqibuli', 'Tsqaltubo', 'Zugdidi'];
        city_states['Germany'] = ['Berlin', 'Baden-Wuerttemberg', 'Bayern', 'Berlin', 'Brandenburg', 'Bremen', 'Hamburg', 'Hessen', 'Mecklenburg-Vorpommern', 'Niedersachsen', 'Nordrhein-Westfalen', 'Rheinland-Pfalz', 'Saarland', 'Sachsen', 'Sachsen-Anhalt', 'Schleswig-Holstein', 'Thueringen'];
        city_states['Greece'] = ['Athens', 'Agion Oros (Mt. Athos)', 'Achaia', 'Aitolia kai Akarmania', 'Argolis', 'Arkadia', 'Arta', 'Attiki', 'Chalkidiki', 'Chanion', 'Chios', 'Dodekanisos', 'Drama', 'Evros', 'Evrytania', 'Evvoia', 'Florina', 'Fokidos', 'Fthiotis', 'Grevena', 'Ileia', 'Imathia', 'Ioannina', 'Irakleion', 'Karditsa', 'Kastoria', 'Kavala', 'Kefallinia', 'Kerkyra', 'Kilkis', 'Korinthia', 'Kozani', 'Kyklades', 'Lakonia', 'Larisa', 'Lasithi', 'Lefkas', 'Lesvos', 'Magnisia', 'Messinia', 'Pella', 'Pieria', 'Preveza', 'Rethynnis', 'Rodopi', 'Samos', 'Serrai', 'Thesprotia', 'Thessaloniki', 'Trikala', 'Voiotia', 'Xanthi', 'Zakynthos'];
        city_states['Hungary'] = ['Budapest', 'Bacs-Kiskun', 'Baranya', 'Bekes', 'Bekescsaba', 'Borsod-Abauj-Zemplen', 'Csongrad', 'Debrecen', 'Dunaujvaros', 'Eger', 'Fejer', 'Gyor', 'Gyor-Moson-Sopron', 'Hajdu-Bihar', 'Heves', 'Hodmezovasarhely', 'Jasz-Nagykun-Szolnok', 'Kaposvar', 'Kecskemet', 'Komarom-Esztergom', 'Miskolc', 'Nagykanizsa', 'Nograd', 'Nyiregyhaza', 'Pecs', 'Pest', 'Somogy', 'Sopron', 'Szabolcs-Szatmar-Bereg', 'Szeged', 'Szekesfehervar', 'Szolnok', 'Szombathely', 'Tatabanya', 'Tolna', 'Vas', 'Veszprem', 'Veszprem', 'Zala', 'Zalaegerszeg'];
        city_states['Iceland'] = ['Reykjavik', 'Akranes', 'Akureyri', 'Arnessysla', 'Austur-Bardhastrandarsysla', 'Austur-Hunavatnssysla', 'Austur-Skaftafellssysla', 'Borgarfjardharsysla', 'Dalasysla', 'Eyjafjardharsysla', 'Gullbringusysla', 'Hafnarfjordhur', 'Husavik', 'Isafjordhur', 'Keflavik', 'Kjosarsysla', 'Kopavogur', 'Myrasysla', 'Neskaupstadhur', 'Nordhur-Isafjardharsysla', 'Nordhur-Mulasys-la', 'Nordhur-Thingeyjarsysla', 'Olafsfjordhur', 'Rangarvallasysla', 'Saudharkrokur', 'Seydhisfjordhur', 'Siglufjordhur', 'Skagafjardharsysla', 'Snaefellsnes-og Hnappadalssysla', 'Strandasysla', 'Sudhur-Mulasysla', 'Sudhur-Thingeyjarsysla', 'Vesttmannaeyjar', 'Vestur-Bardhastrandarsysla', 'Vestur-Hunavatnssysla', 'Vestur-Isafjardharsysla', 'Vestur-Skaftafellssysla'];
        city_states['Ireland'] = ['Dublin', 'Carlow', 'Cavan', 'Clare', 'Cork', 'Donegal', 'Galway', 'Kerry', 'Kildare', 'Kilkenny', 'Laois', 'Leitrim', 'Limerick', 'Longford', 'Louth', 'Mayo', 'Meath', 'Monaghan', 'Offaly', 'Roscommon', 'Sligo', 'Tipperary', 'Waterford', 'Westmeath', 'Wexford', 'Wicklow'];
        city_states['Italy'] = ['Rome', 'Abruzzi', 'Basilicata', 'Calabria', 'Campania', 'Emilia-Romagna', 'Friuli-Venezia Giulia', 'Lazio', 'Liguria', 'Lombardia', 'Marche', 'Molise', 'Piemonte', 'Puglia', 'Sardegna', 'Sicilia', 'Toscana', 'Trentino-Alto Adige', 'Umbria', 'Valle d\\Aosta', 'Veneto'];
        city_states['Latvia'] = ['Riga', 'Aizkraukles', 'Aluksnes', 'Balvu', 'Bauskas', 'Cesu', 'Daugavpils', 'Daugavpils', 'Dobeles', 'Gulbenes', 'Jekabpils', 'Jelgava', 'Jelgavas', 'Jurmala', 'Kraslavas', 'Kuldigas', 'Liepaja', 'Liepajas', 'Limbazu', 'Ludzas', 'Madonas', 'Ogres', 'Preilu', 'Rezekne', 'Rezeknes', 'Riga', 'Rigas', 'Saldus', 'Talsu', 'Tukuma', 'Valkas', 'Valmieras', 'Ventspils', 'Ventspils'];
        city_states['Liechtenstein'] = ['Vaduz', 'Balzers', 'Eschen', 'Gamprin', 'Mauren', 'Planken', 'Ruggell', 'Schaan', 'Schellenberg', 'Triesen', 'Triesenberg'];
        city_states['Lithuania'] = ['Vilnius', 'Alytaus', 'Kauno', 'Klaipedos', 'Marijampoles', 'Panevezio', 'Siauliu', 'Taurages', 'Telsiu', 'Utenos'];
        city_states['Luxembourg'] = ['Luxembourg', 'Diekirch', 'Grevenmacher'];
        city_states['Macedonia'] = ['Skopje', 'Aracinovo', 'Bac', 'Belcista', 'Berovo', 'Bistrica', 'Bitola', 'Blatec', 'Bogdanci', 'Bogomila', 'Bogovinje', 'Bosilovo', 'Brvenica', 'Cair', 'Capari', 'Caska', 'Cegrane', 'Centar', 'Centar Zupa', 'Cesinovo', 'Cucer-Sandevo', 'Debar', 'Delcevo', 'Delogozdi', 'Demir Hisar', 'Demir Kapija', 'Dobrusevo', 'Dolna Banjica', 'Dolneni', 'Dorce Petrov', 'Drugovo', 'Dzepciste', 'Gazi Baba', 'Gevgelija', 'Gostivar', 'Gradsko', 'Ilinden', 'Izvor', 'Jegunovce', 'Kamenjane', 'Karbinci', 'Karpos', 'Kavadarci', 'Kicevo', 'Kisela Voda', 'Klecevce', 'Kocani', 'Konce', 'Kondovo', 'Konopiste', 'Kosel', 'Kratovo', 'Kriva Palanka', 'Krivogastani', 'Krusevo', 'Kuklis', 'Kukurecani', 'Kumanovo', 'Labunista', 'Lipkovo', 'Lozovo', 'Lukovo', 'Makedonska Kamenica', 'Makedonski Brod', 'Mavrovi Anovi', 'Meseista', 'Miravci', 'Mogila', 'Murtino', 'Negotino', 'Negotino-Polosko', 'Novaci', 'Novo Selo', 'Oblesevo', 'Ohrid', 'Orasac', 'Orizari', 'Oslomej', 'Pehcevo', 'Petrovec', 'Plasnica', 'Podares', 'Prilep', 'Probistip', 'Radovis', 'Rankovce', 'Resen', 'Rosoman', 'Rostusa', 'Samokov', 'Saraj', 'Sipkovica', 'Sopiste', 'Sopotnica', 'Srbinovo', 'Star Dojran', 'Staravina', 'Staro Nagoricane', 'Stip', 'Struga', 'Strumica', 'Studenicani', 'Suto Orizari', 'Sveti Nikole', 'Tearce', 'Tetovo', 'Topolcani', 'Valandovo', 'Vasilevo', 'Velesta', 'Veles', 'Vevcani', 'Vinica', 'Vitoliste', 'Vranestica', 'Vrapciste', 'Vratnica', 'Vrutok', 'Zajas', 'Zelenikovo', 'Zeleno', 'Zitose', 'Zletovo', 'Zrnovci'];
        city_states['Malta'] = ['Valletta'];
        city_states['Moldova'] = ['Chisinau', 'Balti', 'Cahul', 'Chisinau', 'Chisinau', 'Edinet', 'Gagauzia', 'Lapusna', 'Orhei', 'Soroca', 'Stinga Nistrului', 'Tighina', 'Ungheni'];
        city_states['Monaco'] = ['Monaco', 'Fontvieille', 'La Condamine', 'Monaco-Ville', 'Monte-Carlo'];
        city_states['Netherlands'] = ['Amsterdam', 'The Hague', 'Drenthe', 'Flevoland', 'Friesland', 'Gelderland', 'Groningen', 'Limburg', 'Noord-Brabant', 'Noord-Holland', 'Overijssel', 'Utrecht', 'Zeeland', 'Zuid-Holland'];
        city_states['Norway'] = ['Oslo', 'Akershus', 'Aust-Agder', 'Buskerud', 'Finnmark', 'Hedmark', 'Hordaland', 'More og Romsdal', 'Nordland', 'Nord-Trondelag', 'Oppland', 'Ostfold', 'Rogaland', 'Sogn og Fjordane', 'Sor-Trondelag', 'Telemark', 'Troms', 'Vest-Agder', 'Vestfold'];
        city_states['Poland'] = ['Warsaw', 'Dolnoslaskie', 'Kujawsko-Pomorskie', 'Lodzkie', 'Lubelskie', 'Lubuskie', 'Malopolskie', 'Mazowieckie', 'Opolskie', 'Podkarpackie', 'Podlaskie', 'Pomorskie', 'Slaskie', 'Swietokrzyskie', 'Warminsko-Mazurskie', 'Wielkopolskie', 'Zachodniopomorskie'];
        city_states['Portugal'] = ['Lisbon', 'Aveiro', 'Acores (Azores)', 'Beja', 'Braga', 'Braganca', 'Castelo Branco', 'Coimbra', 'Evora', 'Faro', 'Guarda', 'Leiria', 'Lisboa', 'Madeira', 'Portalegre', 'Porto', 'Santarem', 'Setubal', 'Viana do Castelo', 'Vila Real', 'Viseu'];
        city_states['Romania'] = ['Bucharest (Bucuresti)', 'Alba', 'Arad', 'Arges', 'Bacau', 'Bihor', 'Bistrita-Nasaud', 'Botosani', 'Braila', 'Brasov', 'Buzau', 'Calarasi', 'Caras-Severin', 'Cluj', 'Constanta', 'Covasna', 'Dimbovita', 'Dolj', 'Galati', 'Gorj', 'Giurgiu', 'Harghita', 'Hunedoara', 'Ialomita', 'Iasi', 'Ilfov', 'Maramures', 'Mehedinti', 'Mures', 'Neamt', 'Olt', 'Prahova', 'Salaj', 'Satu Mare', 'Sibiu', 'Suceava', 'Teleorman', 'Timis', 'Tulcea', 'Vaslui', 'Vilcea', 'Vrancea'];
        city_states['San Marino'] = ['San Marino', 'Acquaviva', 'Borgo Maggiore', 'Chiesanuova', 'Domagnano', 'Faetano', 'Fiorentino', 'Monte Giardino', 'Serravalle'];
        city_states['Serbia-Montenegro-Yugoslavia'] = ['Belgrade', 'Kosovo', 'Montenegro', 'Serbia', 'Vojvodina'];
        city_states['Slovakia'] = ['Bratislava', 'Banskobystricky', 'Kosicky', 'Nitriansky', 'Presovsky', 'Trenciansky', 'Trnavsky', 'Zilinsky'];
        city_states['Slovenia'] = ['Ljubljana', 'Ajdovscina', 'Beltinci', 'Bled', 'Bohinj', 'Borovnica', 'Bovec', 'Brda', 'Brezice', 'Brezovica', 'Cankova-Tisina', 'Celje', 'Cerklje na Gorenjskem', 'Cerknica', 'Cerkno', 'Crensovci', 'Crna na Koroskem', 'Crnomelj', 'Destrnik-Trnovska Vas', 'Divaca', 'Dobrepolje', 'Dobrova-Horjul-Polhov Gradec', 'Dol pri Ljubljani', 'Domzale', 'Dornava', 'Dravograd', 'Duplek', 'Gorenja Vas-Poljane', 'Gorisnica', 'Gornja Radgona', 'Gornji Grad', 'Gornji Petrovci', 'Grosuplje', 'Hodos Salovci', 'Hrastnik', 'Hrpelje-Kozina', 'Idrija', 'Ig', 'Ilirska Bistrica', 'Ivancna Gorica', 'Izola', 'Jesenice', 'Jursinci', 'Kamnik', 'Kanal', 'Kidricevo', 'Kobarid', 'Kobilje', 'Kocevje', 'Komen', 'Koper', 'Kozje', 'Kranj', 'Kranjska Gora', 'Krsko', 'Kungota', 'Kuzma', 'Lasko', 'Lenart', 'Lendava', 'Litija', 'Ljubno', 'Ljutomer', 'Logatec', 'Loska Dolina', 'Loski Potok', 'Luce', 'Lukovica', 'Majsperk', 'Maribor', 'Medvode', 'Menges', 'Metlika', 'Mezica', 'Miren-Kostanjevica', 'Mislinja', 'Moravce', 'Moravske Toplice', 'Mozirje', 'Murska Sobota', 'Muta', 'Naklo', 'Nazarje', 'Nova Gorica', 'Novo Mesto', 'Odranci', 'Ormoz', 'Osilnica', 'Pesnica', 'Piran', 'Pivka', 'Podcetrtek', 'Podvelka-Ribnica', 'Postojna', 'Preddvor', 'Ptuj', 'Puconci', 'Race-Fram', 'Radece', 'Radenci', 'Radlje ob Dravi', 'Radovljica', 'Ravne-Prevalje', 'Ribnica', 'Rogasevci', 'Rogaska Slatina', 'Rogatec', 'Ruse', 'Semic', 'Sencur', 'Sentilj', 'Sentjernej', 'Sentjur pri Celju', 'Sevnica', 'Sezana', 'Skocjan', 'Skofja Loka', 'Skofljica', 'Slovenj Gradec', 'Slovenska Bistrica', 'Slovenske Konjice', 'Smarje pri Jelsah', 'Smartno ob Paki', 'Sostanj', 'Starse', 'Store', 'Sveti Jurij', 'Tolmin', 'Trbovlje', 'Trebnje', 'Trzic', 'Turnisce', 'Velenje', 'Velike Lasce', 'Videm', 'Vipava', 'Vitanje', 'Vodice', 'Vojnik', 'Vrhnika', 'Vuzenica', 'Zagorje ob Savi', 'Zalec', 'Zavrc', 'Zelezniki', 'Ziri', 'Zrece'];
        city_states['Spain'] = ['Madrid', 'Andalucia', 'Aragon', 'Asturias', 'Baleares (Balearic Islands)', 'Ceuta', 'Canarias (Canary Islands)', 'Cantabria', 'Castilla-La Mancha', 'Castilla y Leon', 'Cataluna', 'Communidad Valencian', 'Extremadura', 'Galicia', 'La Rioja', 'Melilla', 'Murcia', 'Navarra', 'Pais Vasco (Basque Country)'];
        city_states['Sweden'] = ['Stockholm', 'Blekinge', 'Dalarnas', 'Gavleborgs', 'Gotlands', 'Hallands', 'Jamtlands', 'Jonkopings', 'Kalmar', 'Kronobergs', 'Norrbottens', 'Orebro', 'Ostergotlands', 'Skane', 'Sodermanlands', 'Uppsala', 'Varmlands', 'Vasterbottens', 'Vasternorrlands', 'Vastmanlands', 'Vastra Gotalands'];
        city_states['Switzerland'] = ['Bern', 'Aargau', 'Appenzell Ausser-Rhoden', 'Appenzell Inner-Rhoden', 'Basel-Landschaft', 'Basel-Stadt', 'Fribourg', 'Geneve', 'Glarus', 'Graubunden', 'Jura', 'Luzern', 'Neuchatel', 'Nidwalden', 'Obwalden', 'Sankt Gallen', 'Schaffhausen', 'Schwyz', 'Solothurn', 'Thurgau', 'Ticino', 'Uri', 'Valais', 'Vaud', 'Zug', 'Zurich'];
        city_states['Ukraine'] = ['Kiev (Kyyiv)', 'Cherkas\\ka (Cherkasy)', 'Chernihivs\\ka (Chernihiv)', 'Chernivets\\ka (Chernivtsi)', 'Dnipropetrovs\\ka (Dnipropetrovs\\k)', 'Donets\\ka (Donets\\k)', 'Ivano-Frankivs\\ka (Ivano-Frankivs\\k)', 'Izmail (Izmayl)', 'Kharkivs\\ka (Kharkiv)', 'Khersons\\ka (Kherson)', 'Khmel\\nyts\\ka (Khmel\\nyts\\kyy)', 'Kirovohrads\\ka (Kirovohrad)', 'Luhans\\ka (Luhans\\k)', 'L\\vivs\\ka (L\\viv)', 'Mykolayivs\\ka (Mykolayiv)', 'Odes\\ka (Odesa)', 'Poltavs\\ka (Poltava)', 'Avtonomna Respublika Krym', 'Rivnens\\ka (Rivne)', 'Sevastopol\\', 'Sums\\ka (Sumy)', 'Ternopil\\s\\ka (Ternopil\\)', 'Vinnyts\\ka (Vinnytsya)', 'Volyns\\ka (Luts\\k)', 'Zakarpats\\ka (Uzhhorod)', 'Zaporiz\\ka (Zaporizhzhya)', 'Zhytomyrs\\ka (Zhytomyr)'];
        city_states['United Kingdom'] = ['-----ENGLAND:-----', 'Barking/Dagenham', 'Barnet', 'Barnsley', 'Bath/North East Somerset', 'Bedfordshire', 'Bexley', 'Birmingham', 'Blackburn with Darwen', 'Blackpool', 'Bolton', 'Bournemouth', 'Bracknell Forest', 'Bradford', 'Brent', 'Brighton/Hove', 'City of Bristol', 'Bromley', 'Buckinghamshire', 'Bury', 'Calderdale', 'Cambridgeshire', 'Camden', 'Cheshire', 'Cornwall', 'Coventry', 'Croydon', 'Cumbria', 'Darlington', 'Derby', 'Derbyshire', 'Devon', 'Doncaster', 'Dorset', 'Dudley', 'Durham', 'Ealing', 'East Riding of Yorkshire', 'East Sussex', 'Enfield', 'Essex', 'Gateshead', 'Gloucestershire', 'Greenwich', 'Hackney', 'Halton', 'Hammersmith/Fulham', 'Hampshire', 'Haringey', 'Harrow', 'Hartlepool', 'Havering', 'Herefordshire', 'Hertfordshire', 'Hillingdon', 'Hounslow', 'Isle of Wight', 'Islington', 'Kensington/Chelsea', 'Kent', 'City of Kingston upon Hull', 'Kingston upon Thames', 'Kirklees', 'Knowsley', 'Lambeth', 'Lancashire', 'Leeds', 'Leicester', 'Leicestershire', 'Lewisham', 'Lincolnshire', 'Liverpool', 'City of London', 'Luton', 'Manchester', 'Medway', 'Merton', 'Middlesbrough', 'Milton Keynes', 'Newcastle upon Tyne', 'Newham', 'Norfolk', 'Northamptonshire', 'North East Lincolnshire', 'North Lincolnshire', 'North Somerset', 'North Tyneside', 'Northumberl/', 'North Yorkshire', 'Nottingham', 'Nottinghamshire', 'Oldham', 'Oxfordshire', 'Peterborough', 'Plymouth', 'Poole', 'Portsmouth', 'Reading', 'Redbridge', 'Redcar/Clevel/', 'Richmond upon Thames', 'Rochdale', 'Rotherham', 'Rutl/', 'Salford', 'Shropshire', 'S/well', 'Sefton', 'Sheffield', 'Slough', 'Solihull', 'Somerset', 'Southampton', 'Southend-on-Sea', 'South Gloucestershire', 'South Tyneside', 'Southwark', 'Staffordshire', 'Sent Helens', 'Stockport', 'Stockton-on-Tees', 'Stoke-on-Trent', 'Suffolk', 'Sunderl/', 'Surrey', 'Sutton', 'Swindon', 'Tameside', 'Telford/Wrekin', 'Thurrock', 'Torbay', 'Tower Hamlets', 'Trafford', 'Wakefield', 'Walsall', 'Waltham Forest', 'W/sworth', 'Warrington', 'Warwickshire', 'West Berkshire', 'Westminster', 'West Sussex', 'Wigan', 'Wiltshire', 'Windsor/Maidenhead', 'Wirral', 'Wokingham', 'Wolverhampton', 'Worcestershire', 'York', '-----NORTHERN IRELAND:-----', 'Antrim', 'County Antrim', 'Ards', 'Armagh', 'County Armagh', 'Ballymena', 'Ballymoney', 'Banbridge', 'Belfast', 'Carrickfergus', 'Castlereagh', 'Coleraine', 'Cookstown', 'Craigavon', 'Down', 'County Down', 'Dungannon', 'Fermanagh', 'County Fermanagh', 'Larne', 'Limavady', 'Lisburn', 'County Londonderry', 'Derry', 'Magherafelt', 'Moyle', 'Newry/Mourne', 'Newtownabbey', 'North Down', 'Omagh', 'Strabane', 'County Tyrone', '-----SCOTLAND:-----', 'Aberdeen City', 'Aberdeenshire', 'Angus', 'Argyll/Bute', 'The Scottish Borders', 'Clackmannanshire', 'Dumfries/Galloway', 'Dundee City', 'East Ayrshire', 'East Dunbartonshire', 'East Lothian', 'East Renfrewshire', 'City of Edinburgh', 'Falkirk', 'Fife', 'Glasgow City', 'Highland', 'Inverclyde', 'Midlothian', 'Moray', 'North Ayrshire', 'North Lanarkshire', 'Orkney Islands', 'Perth/Kinross', 'Renfrewshire', 'Shetland Islands', 'South Ayrshire', 'South Lanarkshire', 'Stirling', 'West Dunbartonshire', 'Eilean Siar (Western Isles)', 'West Lothian', '-----WALES-----:', 'Isle of Anglesey', 'Blaenau Gwent', 'Bridgend', 'Caerphilly', 'Cardiff', 'Ceredigion', 'Carmarthenshire', 'Conwy', 'Denbighshire', 'Flintshire', 'Gwynedd', 'Merthyr Tydfil', 'Monmouthshire', 'Neath Port Talbot', 'Newport', 'Pembrokeshire', 'Powys', 'Rhondda Cynon Taff', 'Swansea', 'Torfaen', 'The Vale of Glamorgan', 'Wrexham'];
        city_states['Vatican City'] = [''];
        //Islands
        city_states['Arctic Ocean'] = ['Franz Josef Land', 'Svalbard'];
        city_states['Atlantic Ocean-North'] = ['Alderney', 'Azores', 'Baixo', 'Belle-Ile', 'Bermuda', 'Bioko', 'Block', 'Boa Vista', 'Borduy', 'Bugio', 'Canary Islands', 'Cape Breton', 'Cape Verde Islands', 'Channel Islands', 'Corvo', 'Deer Isle', 'Eysturoy', 'Faeroe Islands', 'Fago', 'Faial', 'Flores', 'Fuerteventura', 'Fugloy', 'Gomera', 'Graciosa', 'Gran Canaria', 'Grand Manan', 'Grande', 'Greenland', 'Guernsey', 'Hebrides', 'Herm', 'Hestur', 'Hierro', 'Iceland', 'Iles De La Madeleine', 'Ile de Noirmoutier', 'Ile de\\ Re', 'Ile d\\ OlÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ron', 'Ile d\\ Yeu', 'Ilhas Desertas', 'Ireland', 'Isle au Haut', 'Isle of Lewis', 'Isle of Mull', 'Isle of Skye', 'Jersey', 'Kalsoy', 'Koltur', 'Kunoy', 'Lanzarote', 'La Palma', 'Litla Dimun', 'Long Island', 'Jan Mayen', 'Madeira Islands', 'Maio', 'Martha\\s Vineyard', 'Matinicus', 'Monhegan', 'Mount Desert', 'Mykines', 'Nantucket Island', 'Newfoundland', 'Nolsoy', 'Orkney Islands', 'Pico', 'Porto Santo', 'Prince Edward Island', 'Sent Peter/Sent Paul Rocks', 'Sent-Pierre/Miquelon', 'Praia', 'Sable Island', 'Sal', 'Sandoy', 'Santo Antao', 'Santa Maria', 'Sao Jorge', 'Sao Miguel', 'Sao Nicolau', 'Sao Tiago', 'Sao Tome/Principe', 'Sao Vicente', 'Sark', 'Scilly Isles', 'Shetland Islands', 'Skuvoy', 'Stora Dimun', 'Streymoy', 'Sumba', 'Svinoy', 'Swans', 'Tenerife', 'Terceira', 'Uist Islands', 'Vagar', 'Viday', 'Vinalhaven'];
        city_states['Atlantic Ocean-South'] = ['Amsterdam', 'Andaman Islands', 'Annobon', 'Ascension', 'Bouvet', 'Falkland Islands', 'Gough', 'Martin Vas Islands', 'Nightingale', 'Sent Helena', 'Shag/Black Rocks', 'South Georgia', 'South Orkney Islands', 'South Sandwich Islands', 'Traversay', 'Trindade', 'Tristan da Cunha'];
        city_states['Assorted'] = ['Akimiski', 'Aland', 'Alcatraz', 'Apostle Islands', 'Baffin', 'Banka', 'Banks', 'Beaver', 'Belcher Islands', 'Belitung', 'Borneo', 'Bornholm', 'Brac', 'Coats', 'Cres', 'Devon', 'East Frisian Islands', 'Ellesmere', 'Fyn', 'Galveston', 'Gotland', 'Groote Eylandt', 'Hiiumaa', 'Hong Kong Island', 'Ile d\\ Anticosti', 'Ile d\\ Orleans', 'Isla de Ometepe', 'Isla Del Ray', 'Isle of Man', 'Isle of Wight', 'Isle Royale', 'Jutland', 'Key Largo', 'Key West', 'King William', 'Krek', 'Langeland', 'Lantau', 'Lolland', 'Lundy', 'Mackinac', 'Madeleine Islands', 'Manhattan Island', 'Manitoulin', 'Marsh', 'Matagorda', 'Melville', 'North Hero', 'Oland', 'Paracel Islands', 'Pelee', 'Prince Charles', 'Prince of Wales', 'Queen Elizabeth Islands', 'Saaremaa', 'Sjaelland', 'Somerset', 'Southhampton', 'South Hero', 'Spratley Islands', 'Sulawesi', 'Victoria', 'Washington', 'Wellesley Islands'];
        city_states['Caribbean Sea'] = ['Abaco (great)', 'Abaco (little)', 'Acklins', 'Andros', 'Anegada', 'Anguilla', 'Antigua', 'Aruba', 'Bahamas', 'Barbados', 'Barbuda', 'Bimini Islands', 'Bonaire', 'Caicos Islands', 'Cat', 'Cayman Brac', 'Cayman Islands', 'Cozumel', 'Crooked', 'Cuba', 'Curacao', 'Dominica', 'Exuma', 'Grand Bahama', 'Grand Cayman', 'Grand Turk', 'Greater Antilles', 'Great Inagua', 'Grenada', 'Guadeloupe', 'Hispaniola (Haiti/DOR)', 'Isla de Margarita', 'Isla Mujeres', 'Isla La Tortuga', 'Isle of Youth', 'Jamaica', 'Lesser Antilles', 'Little Cayman', 'Little Inagua', 'Long', 'Marie-Galante', 'Martinique', 'Mayaguana', 'Montserrat', 'Navassa', 'Nevis', 'New Providence', 'Providencia', 'Puerto Rico', 'Roatan', 'Rum Cay', 'Sent Barts', 'Sent Croix', 'Sent Eustatius', 'Sent John', 'Sent Kitts', 'Sent Lucia', 'Sent Martin/Sint Maartan', 'Sent Thomas', 'St Vincent and the Grenadines', 'Saba', 'San Blas Islands', 'San Salvador', 'San Andres', 'Santa Catilina (Sent Catherine)', 'Tobago', 'Tortola', 'Trinidad', 'Virgin Gorda', 'West Indies'];
        city_states['Greek Isles'] = ['Aegina', 'Alonissos', 'Amorgos', 'Andros', 'Angistri', 'Astipalea', 'Carpathos', 'Cephalonia', 'Chios (Hios)', 'Corfu', 'Cos (Kos)', 'Crete (Kriti)', 'Cyclades Islands', 'Dodecanese Islands', 'Dokos', 'Eubaea (Evia)', 'Evia', 'Hydra', 'Ikaria', 'Ionian Islands', 'Ios', 'Ithaca', 'Kea', 'Kefalonia', 'Kefalos', 'Kalimnos', 'Kassos', 'Kithnos', 'Kos', 'Kythnos', 'Kythria', 'Lefkada', 'Lemnos', 'Leros', 'Lesvos', 'Leucas', 'Limnos', 'Lipsi', 'Los', 'Melos', 'Mykonos', 'Naxos', 'Nisyros', 'Paros', 'Patmos', 'Poros', 'Pothia', 'Rhodes (Rodos)', 'Salamina', 'Samos', 'Samothrace', 'Santorini', 'Serifos', 'Seriphos', 'Sifnos', 'Sikinos', 'Skiros', 'Skiathos', 'Skopelos', 'Skyros', 'Spetses', 'Sporades Islands', 'Syros', 'Tenos (Tinos)', 'Thassos', 'Tzia', 'Zakinthos', 'Zante'];
        city_states['Indian Ocean'] = ['Addu Atoll', 'Agalega Islands', 'Amsterdam', 'Andaman Islands', 'Anjouan (Nzwani)', 'Ari Atoll', 'Ashmore/Cartier Islands', 'Bali', 'Barrow', 'Bathurst', 'Bompoka', 'Cape Barren', 'Car Nicobar', 'Chagos Archipelago', 'Christmas', 'Comoros', 'Crozet Islands', 'Danger', 'Diego Garcia', 'Eagle Islands', 'Egmont Islands', 'Faadhippolhu Atoll', 'Felidhoo Atoll', 'Flinders', 'Goidhoo Atoll', 'Grand Comore (Njazidja)', 'Great Nicobar', 'Hadhdhunmathee', 'Heard', 'Huvadhoo Atoll', 'Ihavandhippolhu Atoll', 'Java', 'Kangaroo', 'Katchall', 'Keeling Islands (Cocos)', 'King', 'Kolhumadulu Atoll', 'Lakshadweep Islands', 'Little Andaman', 'Little Nicobar', 'Lower Andaman', 'Maalhosmadulu Atoll', 'Maamakunudhoo Atoll', 'Madagascar', 'Mahe', 'Maldives', 'Male\\ Atoll', 'Mauritius', 'Mayotte', 'McDonald Islands', 'Melville', 'Middle Andaman', 'Miladhunmafulu Atoll', 'Moheli (Mwali)', 'Molaku Atoll', 'Nancowry', 'Nelsons Island', 'Nias', 'Nicobar Islands', 'Nilandhoo Atoll', 'North Andaman', 'Peros Banhos', 'Phuket', 'Prince Edward Islands', 'Reunion', 'Rodrigues', 'Sent Paul', 'Salomon Islands', 'Seychelles', 'Shag', 'Siberut', 'Simeulue', 'Sipura', 'Socotra', 'Sumatra', 'Sri Lanka', 'Tarasa Dwip', 'Tasmania', 'Thiladhunmathee Atoll', 'Three Brothers', 'Timor', 'Tromelin', 'Zanzibar'];
        city_states['Mediterranean Sea'] = ['Aeolian Islands', 'Alboran', 'Balearic Islands', 'Cabrera', 'Capraia', 'Capri', 'Corse (Corsica)', 'Cyprus', 'Elba', 'Formentera', 'Gozo', 'Ibiza (Ivisa)', 'Iles d\\ Hyeres', 'Jalitah', 'Lampedusa', 'Lipari Islands', 'Mallorca (Majorca)', 'Malta', 'Maltese Islands', 'Menorca (Minorca)', 'Pantelleria', 'Ponziane', 'Salina', 'Sant\\ Antioca', 'San Pietro', 'Sardinia (Sardegna)', 'Sicily (Sicilia)', 'Stromboli', 'Vulcano', 'Zembra'];
        city_states['Oceania'] = ['Abaiang', 'Admiralty Islands', 'Aitutaki', 'Alofi', 'Ambrym', 'American Samoa', 'Antipodes', 'Atafu Atoll', 'Atiu', 'Auckland Islands', 'Aunu\\u', 'Austral Islands', 'Banaba', 'Bega', 'Bora Bora', 'Bougainville', 'Bounty Islands', 'Campbell', 'Chatham Islands', 'Choiseul', 'Cook Islands', 'Coral Sea Islands', 'Efate', 'Elao', 'Erromango', 'Espiritu Santo', '\\ Eua', 'Faioa', 'Fakaofo Atoll', 'Fatu Hiva', 'Fiji', 'French Polynesia', 'Funafuti Atoll', 'Futuna', 'Gambier Islands', 'Gau', 'Gilbert Islands', 'Gizo', 'Grand Terre', 'Great Barrier Reef', 'Guadacanal', 'Ha\\apai Island Group', 'Hatutu', 'Hiva Oa', 'Horne Islands', 'Huahine', 'Isle of Pines', 'Kadavu', 'Karkar', 'Kioa', 'Kiribati', 'Kiritamati', 'Koro', 'Lakeba', 'Lau Group', 'Lifou', 'Line Islands', 'Loyalty Islands', 'Malaita', 'Malekula', 'Malolo', 'Mangaia', 'Manihiki', 'Manu\\a Group', 'Manuae', 'Mare', 'Marquises Islands', 'Mata Utu', 'Matuku', 'Mauke', 'Maupiti', 'Melanesia', 'Mitiaro', 'Moala', 'Mohotani', 'Moorea', 'Nairai', 'Nanumea Atoll', 'Nassau', 'Nauru', 'Naviti', 'Nepean', 'New Britain', 'New Caledonia', 'New Georgia Islands', 'New Guinea', 'New Ireland', 'Niuafo\\ou', 'Niuas Islands', 'Niuatoputapu', 'Niue', 'Niulakita Atoll', 'Nomuka Island Group', 'Norfolk Islands', 'Nukuaeta', 'Nukufetau Atoll', 'Nuku Hiva', 'Nukulaelae Atoll', 'Nukunono Atoll', 'Ofu', 'Olasega', 'Ono', 'Ouvea', 'Ovalau', 'Palmerston', 'Pangai', 'Penrhyn', 'Philip', 'Phoenix Islands', 'Pitcairn', 'Pitt Island', 'Polynesia', 'Pukapuka', 'Rabi', 'Raiatea', 'Rakahanga', 'Rangiroa', 'Rarotonga', 'Rotuma', 'Samao', 'San Cristobal', 'Santa Cruz Islands', 'Santa Isabel', 'Savai \\i', 'Society Islands', 'Solomon Islands', 'Stewart', 'Suwarrow', 'Tabuaeran', 'Tahaa', 'Tahiti', 'Tahuata', 'Taiohae', 'Tanna', 'Tarawa', 'Tasmania', 'Tau', 'Taveuni', 'Tetiaroa', 'Tokelau', 'Tonga', 'Tongatapu', 'Totoya', 'Tuamotu Islands', 'Tubuai', 'Tupai', 'Tutuila', 'Tuvalu', 'Ua Huka', 'Ua Pou', 'Hiva Oa', 'Upolu', '\\ Uta Vava\\u', 'Uvea', 'Vaiaku', 'Vanua Balavu', 'Vanua Levu', 'Vanuatu', 'Vatulele', 'Vava\\u Island Group', 'Vita Levu', 'Wallis Islands', 'Wallis and Futuna', 'Waya', 'Yasawa', 'Yasawa Group'];
        city_states['Pacific Ocean-North'] = ['Aleutian Islands', 'Alexander Islands', 'Andreanof Islands', 'Babelthuap', 'Baker', 'Bikini', 'Bohol', 'Bonin Islands', 'Cabras', 'Caroline Islands', 'Cebu', 'Channel Islands (US)', 'Cheju Do', 'Chuuk', 'Diomede Islands', 'Guam', 'Hainan', 'Hawaii (big island)', 'Hawaiian Islands', 'Hokkaido', 'Honshu', 'Howland', 'Jaluit Atoll', 'Japan', 'Johnston Atoll', 'Kahoolawe', 'Kauai', 'Kodiak', 'Kosrae', 'Kwajalein Atoll', 'Kyushu', 'Lanai', 'Lifou', 'Loyalty Islands', 'Luzon', 'Maloelap Atoll', 'Majuro Atoll', 'Mare', 'Marshall Islands', 'Maui', 'Micronesia', 'Midway Islands', 'Mili Atoll', 'Mindanao', 'Mindoro', 'Molakai', 'Niihau', 'Near Islands', 'Negros', 'Northern Marianas', 'Nunivak', 'Oahu', 'Okinawa', 'Ostrov Sakhalin', 'Pagan', 'Palau', 'Palawan', 'Palmyra Atoll', 'Panay', 'Philippines', 'Pohnpei', 'Queen Charlotte Islands', 'Rat', 'Rongelap Atoll', 'Sent Lawrence', 'Sent Matthew', 'Sent Paul', 'Saipan', 'Samar', 'San Clemente', 'San Miguel', 'San Nicolas', 'Santa Catalina', 'Santa Cruz', 'Santa Rosa', 'Shikoku', 'Taiwan', 'Tinian', 'Vancouver', 'Volcano Islands', 'Wake Island', 'Yap'];
        city_states['Pacific Ocean-South'] = ['Easter', 'Galapogos Islands', 'Juan Fernandez Islands', 'Isla Espanola', 'Isla Fernandina', 'Isla Genovesa', 'Isla Isabella', 'Isla Marchena', 'Isla Pinta', 'Isla Puna', 'Isla San Cristobal', 'Isla San Salvador', 'Isla Santa Cruz', 'Isla Santa Maria', 'Robinson Crusoe', 'San Felix', 'Santa Clara'];
        //Middle East
        city_states['Afghanistan'] = ['Kabul', 'Badakhshan', 'Badghis', 'Baghlan', 'Balkh', 'Bamian', 'Farah', 'Faryab', 'Ghazni', 'Ghowr', 'Helmand', 'Herat', 'Jowzjan', 'Kabol', 'Kandahar', 'Kapisa', 'Khowst', 'Konar', 'Kondoz', 'Laghman', 'Lowgar', 'Nangarhar', 'Nimruz', 'Nurestan', 'Oruzgan', 'Paktia', 'Paktika', 'Parvan', 'Samangan', 'Sar-e Pol', 'Takhar', 'Vardak', 'Zabol'];
        city_states['Armenia'] = ['Yerevan', 'Aragatsotn', 'Ararat', 'Armavir', 'Geghark\\unik\\', 'Kotayk\\', 'Lorri', 'Shirak', 'Syunik\\', 'Tavush', 'Vayots\\ Dzor'];
        city_states['Azerbaijan'] = ['Baku (Baki)', 'Abseron', 'Agcabadi', 'Agdam', 'Agdas', 'Agstafa', 'Agsu', 'Ali Bayramli', 'Astara', 'Balakan', 'Barda', 'Beylaqan', 'Bilasuvar', 'Cabrayil', 'Calilabad', 'Daskasan', 'Davaci', 'Fuzuli', 'Gadabay', 'Ganca', 'Goranboy', 'Goycay', 'Haciqabul', 'Imisli', 'Ismayilli', 'Kalbacar', 'Kurdamir', 'Lacin', 'Lankaran', 'Lankaran', 'Lerik', 'Masalli', 'Mingacevir', 'Naftalan', 'Naxcivan', 'Neftcala', 'Oguz', 'Qabala', 'Qax', 'Qazax', 'Qobustan', 'Quba', 'Qubadli', 'Qusar', 'Saatli', 'Sabirabad', 'Saki', 'Saki', 'Salyan', 'Samaxi', 'Samkir', 'Samux', 'Siyazan', 'Sumqayit', 'Susa', 'Susa', 'Tartar', 'Tovuz', 'Ucar', 'Xacmaz', 'Xankandi', 'Xanlar', 'Xizi', 'Xocali', 'Xocavand', 'Yardimli', 'Yevlax', 'Yevlax', 'Zangilan', 'Zaqatala', 'Zardab'];
        city_states['Bahrain'] = ['Manama', 'Al Hadd', 'Al Manamah', 'Al Mintaqah al Gharbiyah', 'Al Mintaqah al Wusta', 'Al Mintaqah ash Shamaliyah', 'Al Muharraq', 'Ar Rifa\\ wa al Mintaqah al Janubiyah', 'Jidd Hafs', 'Madinat Hamad', 'Madinat \\Isa', 'Juzur Hawar', 'Sitrah'];
        city_states['Cyprus'] = ['Nicosia', 'Famagusta', 'Kyrenia', 'Larnaca', 'Limassol', 'Paphos'];
        city_states['Iran'] = ['Tehran', 'Ardabil', 'Azarbayjan-e Gharbi', 'Azarbayjan-e Sharqi', 'Bushehr', 'Chahar Mahall va Bakhtiari', 'Esfahan', 'Fars', 'Gilan', 'Golestan', 'Hamadan', 'Hormozgan', 'Ilam', 'Kerman', 'Kermanshah', 'Khorasan', 'Khuzestan', 'Kohkiluyeh va Buyer Ahmad', 'Kordestan', 'Lorestan', 'Markazi', 'Mazandaran', 'Qazvin', 'Qom', 'Semnan', 'Sistan va Baluchestan', 'Yazd', 'Zanjan'];
        city_states['Iraq'] = ['Baghdad', 'Al Anbar', 'Al Basrah', 'Al Muthanna', 'Al Qadisiyah', 'An Najaf', 'Arbil', 'As Sulaymaniyah', 'At Ta\\mim', 'Babil', 'Dahuk', 'Dhi Qar', 'Diyala', 'Karbala\\', 'Maysan', 'Ninawa', 'Salah ad Din', 'Wasit'];
        city_states['Israel'] = ['Jerusalem', 'Central', 'Haifa', 'Northern', 'Southern', 'Tel Aviv'];
        city_states['Jordan'] = ['Amman', 'Ajlun', 'Al \\Aqabah', 'Al Balqa\\', 'Al Karak', 'Al Mafraq', 'At Tafilah', 'Az Zarqa\\', 'Irbid', 'Jarash', 'Ma\\an', 'Madaba'];
        city_states['Kuwait'] = ['Kuwait', 'Al Ahmadi', 'Al Farwaniyah', 'Al \\Asimah', 'Al Jahra\\', 'Hawalli'];
        city_states['Kyrgyzstan'] = ['Bishkek Shaary', 'Batken Oblasty', 'Chuy Oblasty (Bishkek)', 'Jalal-Abad Oblasty', 'Naryn Oblasty', 'Osh Oblasty', 'Talas Oblasty', 'Ysyk-Kol Oblasty (Karakol)'];
        city_states['Lebanon'] = ['Beirut', 'Beyrouth', 'Beqaa', 'Liban-Nord', 'Liban-Sud', 'Mont-Liban', 'Nabatiye'];
        city_states['Oman'] = ['Muscat', 'Ad Dakhiliyah', 'Al Batinah', 'Al Wusta', 'Ash Sharqiyah', 'Az Zahirah', 'Musandam', 'Zufar'];
        city_states['Pakistan'] = ['Islamabad', 'Balochistan', 'Federally Administered Tribal Areas', 'North-West Frontier Province', 'Punjab', 'Sindh'];
        city_states['Qatar'] = ['Doha', 'Ad Dawhah', 'Al Ghuwayriyah', 'Al Jumayliyah', 'Al Khawr', 'Al Wakrah', 'Ar Rayyan', 'Jarayan al Batinah', 'Madinat ash Shamal', 'Umm Salal'];
        city_states['Saudi Arabia'] = ['Riyadh', 'Al Bahah', 'Al Hudud ash Shamaliyah', 'Al Jawf', 'Al Madinah', 'Al Qasim', 'Ar Riyad', 'Ash Sharqiyah (Eastern Province)', '\\Asir', 'Ha\\il', 'Jizan', 'Makkah', 'Najran', 'Tabuk'];
        city_states['Syria'] = ['Damascus', 'Al Hasakah', 'Al Ladhiqiyah', 'Al Qunaytirah', 'Ar Raqqah', 'As Suwayda\\', 'Dar\\a', 'Dayr az Zawr', 'Dimashq', 'Halab', 'Hamah', 'Hims', 'Idlib', 'Rif Dimashq', 'Tartus'];
        city_states['Tajikistan'] = ['Dushanbe', 'Viloyati Mukhtori Kuhistoni Badakhshon', 'Viloyati Khatlon', 'Viloyati Sughd'];
        city_states['Turkey'] = ['Ankara', 'Adana', 'Adiyaman', 'Afyon', 'Agri', 'Aksaray', 'Amasya', 'Antalya', 'Ardahan', 'Artvin', 'Aydin', 'Balikesir', 'Bartin', 'Batman', 'Bayburt', 'Bilecik', 'Bingol', 'Bitlis', 'Bolu', 'Burdur', 'Bursa', 'Canakkale', 'Cankiri', 'Corum', 'Denizli', 'Diyarbakir', 'Duzce', 'Edirne', 'Elazig', 'Erzincan', 'Erzurum', 'Eskisehir', 'Gaziantep', 'Giresun', 'Gumushane', 'Hakkari', 'Hatay', 'Icel', 'Igdir', 'Isparta', 'Istanbul', 'Izmir', 'Kahramanmaras', 'Karabuk', 'Karaman', 'Kars', 'Kastamonu', 'Kayseri', 'Kilis', 'Kirikkale', 'Kirklareli', 'Kirsehir', 'Kocaeli', 'Konya', 'Kutahya', 'Malatya', 'Manisa', 'Mardin', 'Mugla', 'Mus', 'Nevsehir', 'Nigde', 'Ordu', 'Osmaniye', 'Rize', 'Sakarya', 'Samsun', 'Sanliurfa', 'Siirt', 'Sinop', 'Sirnak', 'Sivas', 'Tekirdag', 'Tokat', 'Trabzon', 'Tunceli', 'Usak', 'Van', 'Yalova', 'Yozgat', 'Zonguldak  Buri', 'Sisaket', 'Songkhla', 'Sukhothai', 'Suphan Buri', 'Surat Thani', 'Surin', 'Tak', 'Trang', 'Trat', 'Ubon Ratchathani', 'Udon Thani', 'Uthai Thani', 'Uttaradit', 'Yala', 'Yasothon'];
        city_states['Turkmenistan'] = ['Ashgabat', 'Ahal Welayaty', 'Balkan Welayaty', 'Dasoguz Welayaty', 'Labap Welayaty', 'Mary Welayaty'];
        city_states['United Arab Emirates'] = ['Abu Dhabi', 'Abu Zaby (Abu Dhabi)', '\\Ajman', 'Al Fujayrah', 'Ash Shariqah (Sharjah)', 'Dubayy (Dubai)', 'Ra\\s al Khaymah', 'Umm al Qaywayn'];
        city_states['Uzbekistan'] = ['Tashkent (Toshkent)', 'Andijon Viloyati', 'Buxoro Viloyati', 'Farg\\ona Viloyati', 'Jizzax Viloyati', 'Namangan Viloyati', 'Navoiy Viloyati', 'Qashqadaryo Viloyati (Qarshi)', 'Qaraqalpog\\iston Respublikasi', 'Samarqand Viloyati', 'Sirdaryo Viloyati (Guliston)', 'Surxondaryo Viloyati (Termiz)', 'Toshkent Shahri', 'Toshkent Viloyati', 'Xorazm Viloyati (Urganch)'];
        city_states['Yemen'] = ['Sanaa', 'Abyan', '\\Adan', 'Al Bayda\\', 'Al Hudaydah', 'Al Jawf', 'Al Mahrah', 'Al Mahwit', 'Dhamar', 'Hadramawt', 'Hajjah', 'Ibb', 'Lahij', 'Ma\\rib', 'Sa\\dah', 'San\\a\\', 'Shabwah', 'Ta\\izz'];
        //North America
        city_states['Bermuda'] = ['Hamilton', 'Devonshire', 'Hamilton', 'Hamilton', 'Paget', 'Pembroke', 'Saint George', 'Saint George\\s', 'Sandys', 'Smith\\s', 'Southampton', 'Warwick'];
        city_states['Canada'] = ['Ottawa', 'Alberta', 'British Columbia', 'Manitoba', 'New Brunswick', 'Newfoundland and Labrador', 'Northwest Territories', 'Nova Scotia', 'Nunavut', 'Ontario', 'Prince Edward Island', 'Quebec', 'Saskatchewan', 'Yukon Territory'];
        city_states['Caribbean'] = [''];
        city_states['Greenland'] = ['Nuuk (Godthab)', 'Avannaa (Nordgronland)', 'Tunu (Ostgronland)', 'Kitaa (Vestgronland)'];
        city_states['Mexico'] = ['Mexico (Distrito Federal)', 'Aguascalientes', 'Baja California', 'Baja California Sur', 'Campeche', 'Chiapas', 'Chihuahua', 'Coahuila de Zaragoza', 'Colima', 'Durango', 'Guanajuato', 'Guerrero', 'Hidalgo', 'Jalisco', 'Michoacan de Ocampo', 'Morelos', 'Nayarit', 'Nuevo Leon', 'Oaxaca', 'Puebla', 'Queretaro de Arteaga', 'Quintana Roo', 'San Luis Potosi', 'Sinaloa', 'Sonora', 'Tabasco', 'Tamaulipas', 'Tlaxcala', 'Veracruz-Llave', 'Yucatan', 'Zacatecas'];
        city_states['United States'] = ['Washington DC', 'Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', 'Delaware', 'Georgia', 'Kentucky', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusets', 'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico', 'New York', 'North Carolina', 'North Dakota', 'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania', 'Rhode Island', 'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont', 'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming'];
        //South America
        city_states['Argentina'] = ['Buenos Aires', 'Catamarca', 'Chaco', 'Chubut', 'Cordoba', 'Corrientes', 'Entre Rios', 'Formosa', 'Jujuy', 'La Pampa', 'La Rioja', 'Mendoza', 'Misiones', 'Neuquen', 'Rio Negro', 'Salta', 'San Juan', 'San Luis', 'Santa Cruz', 'Santa Fe', 'Santiago del Estero', 'Tucuman'];
        city_states['Bolivia'] = ['La Paz', 'Sucre', 'Chuquisaca', 'Cochabamba', 'Beni', 'Oruro', 'Pando', 'Potosi', 'Santa Cruz', 'Tarija'];
        city_states['Brazil'] = ['Brasilia', 'Acre', 'Alagoas', 'Amapa', 'Amazonas', 'Bahia', 'Ceara', 'Distrito Federal', 'Espirito Santo', 'Goias', 'Maranhao', 'Mato Grosso', 'Mato Grosso do Sul', 'Minas Gerais', 'Para', 'Paraiba', 'Parana', 'Pernambuco', 'Piaui', 'Rio de Janeiro', 'Rio Grande do Norte', 'Rio Grande do Sul', 'Rondonia', 'Roraima', 'Santa Catarina', 'Sao Paulo', 'Sergipe', 'Tocantins'];
        city_states['Chile'] = ['Santiago', 'Antofagasta', 'Araucania', 'Atacama', 'Bio-Bio', 'Coquimbo', 'Los Lagos', 'Maule', 'Tarapaca', 'Valparaiso'];
        city_states['Colombia'] = ['Bogota', 'Amazonas', 'Antioquia', 'Arauca', 'Atlantico', 'Bolivar', 'Boyaca', 'Caldas', 'Caqueta', 'Casanare', 'Cauca', 'Cesar', 'Choco', 'Cordoba', 'Cundinamarca', 'Guainia', 'Guaviare', 'Huila', 'La Guajira', 'Magdalena', 'Meta', 'Narino', 'Norte de Santander', 'Putumayo', 'Quindio', 'Risaralda', 'San Andres/Providencia', 'Santander', 'Sucre', 'Tolima', 'Valle del Cauca', 'Vaupes', 'Vichada'];
        city_states['Ecuador'] = ['Quito', 'Azuay', 'Bolivar', 'Canar', 'Carchi', 'Chimborazo', 'Cotopaxi', 'El Oro', 'Esmeraldas', 'Galapagos', 'Guayas', 'Imbabura', 'Loja', 'Los Rios', 'Manabi', 'Morona-Santiago', 'Napo', 'Orellana', 'Pastaza', 'Pichincha', 'Sucumbios', 'Tungurahua', 'Zamora-Chinchipe'];
        city_states['Guyana'] = ['Georgetown', 'Barima-Waini', 'Cuyuni-Mazaruni', 'Demerara-Mahaica', 'East Berbice-Corentyne', 'Essequibo Islands-West Demerara', 'Mahaica-Berbice', 'Pomeroon-Supenaam', 'Potaro-Siparuni', 'Upper Demerara-Berbice', 'Upper Takutu-Upper Essequibo'];
        city_states['Paraguay'] = ['Asuncion', 'Alto Paraguay', 'Alto Parana', 'Amambay', 'Boqueron', 'Caaguazu', 'Caazapa', 'Canindeyu', 'Central', 'Concepcion', 'Cordillera', 'Guaira', 'Itapua', 'Misiones', 'Neembucu', 'Paraguari', 'Presidente Hayes', 'San Pedro'];
        city_states['Peru'] = ['Lima', 'Amazonas', 'Ancash', 'Apurimac', 'Arequipa', 'Ayacucho', 'Cajamarca', 'Callao', 'Cusco', 'Huancavelica', 'Huanuco', 'Ica', 'Junin', 'La Libertad', 'Lambayeque', 'Loreto', 'Madre de Dios', 'Moquegua', 'Pasco', 'Piura', 'Puno', 'San Martin', 'Tacna', 'Tumbes', 'Ucayali'];
        city_states['Suriname'] = ['Paramaribo', 'Brokopondo', 'Commewijne', 'Coronie', 'Marowijne', 'Nickerie', 'Para', 'Saramacca', 'Sipaliwini', 'Wanica'];
        city_states['Uruguay'] = ['Montevideo', 'Artigas', 'Canelones', 'Cerro Largo', 'Colonia', 'Durazno', 'Flores', 'Florida', 'Lavalleja', 'Maldonado', 'Paysandu', 'Rio Negro', 'Rivera', 'Rocha', 'Salto', 'San Jose', 'Soriano', 'Tacuarembo', 'Treinta y Tres'];
        city_states['Venezuela'] = ['Caracas', 'Amazonas', 'Anzoategui', 'Apure', 'Aragua', 'Barinas', 'Bolivar', 'Carabobo', 'Cojedes', 'Delta Amacuro', 'Dependencias Federales', 'Distrito Federal', 'Falcon', 'Guarico', 'Lara', 'Merida', 'Miranda', 'Monagas', 'Nueva Esparta', 'Portuguesa', 'Sucre', 'Tachira', 'Trujillo', 'Vargas', 'Yaracuy', 'Zulia'];

        var default_country_name;
        try {
            lfvh_jQuery.ajax({
                url: "https://ssl.geoplugin.net/json.gp?k=8a9737a5884968df",
                method: 'get',
                dataType: 'json',
                crossDomain: true,
                async: 'false',
                success: function (data) {
                    default_country_name = data.geoplugin_countryName;
                    if (_this !== undefined) {
                         _this.each(function(){
                            lfvh_jQuery(this).val(default_country_name);
                            lfvh_jQuery(this).change();
                         });
                    }
                }
            });
        } catch (e) {
            default_country_name = "United Kingdom";
        }

        var country = _this;
        var country_name = [];
        lfvh_jQuery.each(city_states, function (key, county) {
            country_name.push(key);
        });
        country_name = country_name.sort();

        lfvh_jQuery.each(country_name, function () {
            var _thiscountry = this;
            lfvh_jQuery.each(_this,function(){
                lfvh_jQuery(this).append("<option value='" + _thiscountry + "'>" + _thiscountry + "</option>");
            });
        });
        
        setTimeout(function(){
            lfvh_jQuery('body').find('.lf-country').each(function(){console.log(this);
                var country_ = lfvh_jQuery(this);
                var state = country_.siblings('.lf-states').first();
                country_.change(function () {
                    state.empty();
                    state.html('');
                    if (typeof city_states[country.val()] !== 'undefined') {
                        lfvh_jQuery.each(city_states[country.val()].sort(), function () {
                            state.append("<option value='" + this + "'>" + this + "</option>");
                        });
                    }
                });
                element = country_;

                country_.val(default_country_name);
                country_.change();
                if (default_country_name === undefined) {
                    lfvh_jQuery.ajax({
                        url: "https://ssl.geoplugin.net/json.gp?k=8a9737a5884968df",
                        method: 'get',
                        dataType: 'json',
                        crossDomain: true,
                        async: false,
                        success: function (data) {
                            default_country_name = data.geoplugin_countryName;
                            country_.val(default_country_name);
                            country_.change();
                        }
                    });
                }
            });
        },1000);
    }
}
function generateImageOverlay() {
    if (!lfvh_jQuery('.lf-img-overlays').hasClass('overlay-color')) {
        lfvh_jQuery('.lf-img-overlays,.lf-img-overlay').remove();
        try {
            lfvh_jQuery('.lf-image-thumb').each(function () {
                var width = lfvh_jQuery(this).find('img').attr('width');
                var height = lfvh_jQuery(this).find('img').attr('height');
                var icon_class = lfvh_jQuery(this).parents('.lf-image-selector-container').attr('overlay-icon-class');
                lfvh_jQuery(this).append('<div class="lf-img-overlays" style="position: absolute;left:2px;top:10px; height: ' + parseInt(height) + 'px; width: ' + parseInt(width) + 'px;"><i class="' + icon_class + ' lf-image-overlay-icon"></i></div>');
            });
        } catch (e) {
        }
    }
    lfvh_jQuery('img.uploaded-icon').each(function () {
        convertImageToIcon(this);
    });
}
function convertImageToIcon(_this) {
    var width = lfvh_jQuery(_this).attr('width');
    var height = lfvh_jQuery(_this).attr('height');
    var icon_size = lfvh_jQuery(_this).attr('icon-size');
    var color = lfvh_jQuery(_this).attr('color');
    var background = lfvh_jQuery(_this).attr('background');
    var style = lfvh_jQuery(_this).attr('style');
    var clas = lfvh_jQuery(_this).attr('class');
    var alt = lfvh_jQuery(_this).attr('alt');
    var src = lfvh_jQuery(_this).attr('lf-src');
    lfvh_jQuery(_this).replaceWith('<i width="' + width + '" height="' + height + '" icon-size="' + icon_size + '" color="' + color + '" background="' + background + '" style="' + style + '" class="' + clas + '" alt="' + alt + '" lf-src="' + src + '"></i>');
}
/*
 * check the fields is visible at conditionally
 * @returns {undefined}
 */
function checkfields() {
    hideOtherConditionalContainers();
    lfvh_jQuery('body').find('.custom-form-label').each(function () {
        if (lfvh_jQuery(this).css('display') !== 'none') {
            lfvh_jQuery(this).css('display', 'inline-block');
        }
    });
    lfvh_jQuery('body').find('.telephone').each(function () {
//       if (lfvh_jQuery(this).parents('.intl-tel-input').prev('label').is(':visible')) 
        if (lfvh_jQuery(this).parents('.intl-tel-input').prev('label').css('display') !== 'none') {
            lfvh_jQuery(this).parents('.intl-tel-input').show().css('display', 'inline-block');
        } else {
//            lfvh_jQuery(this).parents('.intl-tel-input').hide();
        }
    });
    lfvh_jQuery('body').find('.slider-value').each(function () {
//       if (lfvh_jQuery(this).prevAll('.lf-range-selector:first').is(':visible'))
        if (lfvh_jQuery(this).prevAll('.lf-range-selector:first').css('display') !== 'none')
        {
            lfvh_jQuery(this).show();
            lfvh_jQuery(this).prevAll('.lf-range-selector:first').css("display", "inline-block");
        } else {
            if(lfvh_jQuery('.lf-form-container').attr('version') === undefined){
                lfvh_jQuery(this).hide();
            }
        }
    });

    lfvh_jQuery('body').find('.toggler').each(function () {
//       if (lfvh_jQuery(this).prev('label').is(':visible'))
        if (lfvh_jQuery(this).prev('label').css('display') !== 'none')
        {
            lfvh_jQuery(this).show();
        } else {
            if(lfvh_jQuery('.lf-form-container').attr('version') === undefined){
                lfvh_jQuery(this).hide();
            }
        }
    });
    lfvh_jQuery('body').find('.multiselect').each(function () {
//       if (lfvh_jQuery(this).parents('div.btn-group').prevAll('label:first').is(':visible'))
        if (lfvh_jQuery(this).parents('div.btn-group').prevAll('label:first').css('display') !== 'none') {
            lfvh_jQuery(this).parents('div.btn-group').show();
            lfvh_jQuery(this).parents('div.btn-group').prev('select.multi-select-box').css('display', 'none');
        } else {
            if(lfvh_jQuery('.lf-form-container').attr('version') === undefined){
                lfvh_jQuery(this).parents('div.btn-group').hide();
            }
        }
    });
    lfvh_jQuery('body').find('.select-other-textarea').each(function () {
//       if (lfvh_jQuery(this).prevAll('label:first').is(':visible')) 
        if (lfvh_jQuery(this).prevAll('label:first').css('display') !== 'none') {
            lfvh_jQuery(this).show();
        } else {
            if(lfvh_jQuery('.lf-form-container').attr('version') === undefined){
                lfvh_jQuery(this).hide();
            }
        }
    });
    lfvh_jQuery('body').find('.lf-select-single').each(function () {
//       if (lfvh_jQuery(this).prevAll('label:first').is(':visible')) 
        if (lfvh_jQuery(this).prevAll('label:first').css('display') !== 'none') {
            lfvh_jQuery(this).show();
        } else {
            if(lfvh_jQuery('.lf-form-container').attr('version') === undefined){
                lfvh_jQuery(this).hide();
            }
        }
    });


}
function changeStep(form_id, element, form_embed_id) {

    //Changes by OS
    /*  var find = '';         
     find = document.getElementById('lf_'+form_embed_id+'_html-'+form_id).getElementsByTagName("input");
     var find_length = document.getElementById('lf_'+form_embed_id+'_html-'+form_id).getElementsByTagName("input").length;   
     var string = find[0].outerHTML.search('display: none');         
     if(string != '-1'){       
     document.getElementById('lf_'+form_embed_id+'_html-'+form_id).style.display = 'none';      // Hide                            
     var next_div_id = document.getElementById('lf_'+form_embed_id+'_html-'+form_id).nextSibling.id;
     document.getElementById(next_div_id).style.display = 'block';
     document.getElementById(next_div_id).next_div_id += ' active in';
     }
     */
    //End Changes by OS

    var flag = 0;
    element = lfvh_jQuery(element);
    var temp_flag = [];

    //Final Step action
    if (element.hasClass('submit-button')) {

        /* New code by OS for adding validation to final step if user selected webhook option */
        var temp_flag = [];
        var flag;
        lfvh_jQuery('.form.active').find('.lf-form-fields').each(function () {
            var form_element = this;

            if (lfvh_jQuery(form_element).attr('required') !== undefined) {
                checkRequired(lfvh_jQuery(form_element), form_embed_id);
                temp_flag.push(checkRequired(lfvh_jQuery(form_element), form_embed_id));
                if (lfvh_jQuery.inArray(1, temp_flag) === -1) {
                    flag = 0;
                } else {
                    flag = 1;
                }
            }
        });
        if (flag !== 0) {
            return false;
        }
        /* End New code by OS for adding validation to final step if user selected webhook option */

        var posturlattr = lfvh_jQuery(element).attr('post-url');
        var urltopost = lfvh_jQuery(element).attr('data-value');

        /* Code to get hidden variable */
        var modeHiddenAttr = lfvh_jQuery(element).attr('mode-data');
        var modeHiddenURLstr = "";
        var arrmodeHidden = [];
        var addHiddenInputs = "";
        var addfinalPostURL = "";
        var modeRenameAttr = lfvh_jQuery(element).attr('rename-data');
        var arrmodeRename = [];

        if (typeof modeHiddenAttr !== typeof undefined && modeHiddenAttr !== false) {

            arrmodeHidden = modeHiddenAttr.split(",");
            lfcurrentURL = window.location.href;
            var request = {};
            var pairs = lfcurrentURL.substring(lfcurrentURL.indexOf('?') + 1).split('&');
            for (var i = 0; i < pairs.length; i++) {
                if (!pairs[i])
                    continue;
                var pair = pairs[i].split('=');
                request[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
                //loop through hidden var
                
                for (ih = 0; ih < arrmodeHidden.length; ih++) {
                    if(arrmodeHidden[ih].indexOf('=') > -1){
                        var temp_pair = arrmodeHidden[ih].split('=');
                        lfvh_jQuery("<input id='form-final-custom-" + temp_pair[0] + "' name='form-hidden-field-" + temp_pair[0] + "' class='answer-element form-hidden-field' onclick='getCssProperties(this.id)' data-toggle='modal' type='text' value='" + temp_pair[1] + "'/>").appendTo(".lf-customize-form-container form");
                    }
                    if (pair[0] === arrmodeHidden[ih]) {
                        //if a variable name in url is a hidden var the pass it to posted var
                        modeHiddenURLstr = modeHiddenURLstr + "&amp;" + pair[0] + "=" + pair[1];
                        lfvh_jQuery("<input id='form-final-custom-" + pair[0] + "' name='form-hidden-field-" + pair[0] + "' class='answer-element form-hidden-field' onclick='getCssProperties(this.id)' data-toggle='modal' type='text' value='" + pair[1] + "'/>").appendTo(".lf-customize-form-container form");
                    }
                }
            }
        }
        /* End Code to get hidden variable */

        if (posturlattr === 'true') {
            try{
                var postformValues = lfvh_jQuery(".lf-customize-form-container form").serialize();
                /*This code for add input field before the combobox because serializeArray dosen't contain combobox value*/
                lfvh_jQuery(".lf-customize-form-container form").find('select').each(function(){
                    var name = $(this).attr('name');
                    var value = $(this).val();
                    lfvh_jQuery('<input type="hidden" name="'+name+'" class="lf-adjust-combo" value="'+value+'">').insertBefore(this);
                });

                var formInputsAr = lfvh_jQuery("input[name!=lf-fb-hp]", ".lf-customize-form-container form").serializeArray();
                /*Remove the the hidden field which carries combobox value*/
                lfvh_jQuery('.lf-adjust-combo').remove();
                var finalPostURL = urltopost + '?';
                if (modeRenameAttr.length > 0 && typeof modeRenameAttr !== undefined && typeof modeRenameAttr !== false) {
                    arrmodeRename = modeRenameAttr.split(",");
                    for (i = 0; i < arrmodeRename.length; i++) {
                        if (i !== arrmodeRename.length - 1) {
                                finalPostURL += arrmodeRename[i] + "=" + formInputsAr[i].value + "%26";
                        } else {
                                finalPostURL += arrmodeRename[i] + "=" + formInputsAr[i].value;
                        }
                    }
                    finalPostURL = finalPostURL + modeHiddenURLstr;
                } else {
                    finalPostURL = finalPostURL + postformValues;
                }
                window.location.href = finalPostURL;
            }catch(e){}
        }
    }
    //Final Step action



    lfvh_jQuery(element.parents('#lf_' + form_embed_id + '_custom-question-answer-form .form').find('[required="true"]').get().reverse()).each(function () {
        temp_flag.push(checkRequired(lfvh_jQuery(this), form_embed_id));
    });
    element.parents('.form').find('.lf-email').each(function(){
        if(lfvh_jQuery(this).val()!==''){
           temp_flag.push(checkRequired(lfvh_jQuery(this)));
        } 
    });
    if (lfvh_jQuery.inArray(1, temp_flag) !== -1) {
        flag = 1;
    }

    if (typeof form_id === 'undefined' || form_id === 'submit') {
        lfvh_jQuery(lfvh_jQuery('#lf_' + form_embed_id + '_html-form-tab-content').find('[required="true"]').get().reverse()).each(function () {
            flag = checkRequired(lfvh_jQuery(this), form_embed_id);
        });
        return false;
    }

    if (flag === 0 && form_id !== 'submit') {
        try {
            // lfvh_jQuery('#lf_' + form_embed_id + '_custom-question-answer-form #lf_' + form_embed_id + '_' + form_id.trim() + '-step').addClass('active').siblings().removeClass('active');
            lfvh_jQuery("#lf_" + form_embed_id + "_custom-question-answer-form .nav-tabs li").removeClass('active');
            lfvh_jQuery("#lf_" + form_embed_id + "_custom-question-answer-form .nav-tabs a[href='#lf_" + form_embed_id + "_html-" + form_id.trim() + "']").tab('show');
            //lfvh_jQuery('#lf_' + form_embed_id + '_custom-question-answer-form .form').removeClass('in').removeClass('active');
            //lfvh_jQuery("#lf_" + form_embed_id + "_html-" + form_id.trim()).addClass('in active');
        } catch (err) {
            lfvh_jQuery('#lf_' + form_embed_id + '_custom-question-answer-form .form').removeClass('in').removeClass('active');
            lfvh_jQuery("#lf_" + form_embed_id + "_html-" + form_id.trim()).addClass('in active');
        }
        var steps_to_proceed = 100 / lfvh_jQuery('#lf_' + form_embed_id + '_progress-bar').attr('aria-valuemax');
        setTimeout(function () {
            try {
                var step_now = element.parents('.tab-content').find('.form.active').index() + 1;
            } catch (e) {
                //            console.log(e);
            }


            //Changes by OS 
            /*    var count_input = lfvh_jQuery('#lf_'+form_embed_id+'_html-'+form_id).find('input').length;
             var inputs = lfvh_jQuery('#lf_'+form_embed_id+'_html-'+form_id).find('input');
             var count_hidden_inputs = 0;
             for(var i=0;i<count_input;i++){
             if(inputs[i].outerHTML.search('display: none') != '-1'){
             count_hidden_inputs += 1;                
             }            
             }                
             if(count_hidden_inputs != 0){  
             lfvh_jQuery('#lf_'+form_embed_id+'_html-'+form_id).next('div').addClass('active in');
             lfvh_jQuery('#lf_'+form_embed_id+'_html-'+form_id).removeClass('active').removeClass('in');
             }
             */
            //End changes by OS

            var progress_bar_width = step_now * steps_to_proceed;

            //changes by OS
            lfvh_jQuery('#lf_' + form_embed_id + '_' + form_id + '-step').prev('li').removeClass('active');
            lfvh_jQuery('#lf_' + form_embed_id + '_' + form_id + '-step').addClass('active');
            /* try{
             lfvh_jQuery('#lf_'+form_embed_id+'_'+form_id+'-step').prev('li').removeClass('active');
             if(count_hidden_inputs != 0){
             lfvh_jQuery('#lf_'+form_embed_id+'_'+form_id+'-step').next('li').addClass('active');
             }
             else{
             lfvh_jQuery('#lf_'+form_embed_id+'_'+form_id+'-step').addClass('active');
             }
             }
             catch(Exception){ }
             */
            //End changes by OS


            lfvh_jQuery('#lf_' + form_embed_id + '_progress-bar').attr('style', 'width:' + progress_bar_width + "% !important");
            if (lfvh_jQuery('#lf_' + form_embed_id + '_progress-bar').length < 1) {
                //lfvh_jQuery('#lf_' + form_embed_id + '_html-final').addClass('active').addClass('in');

            }
        }, 200);

        var timer = setTimeout(function () {
            checkfields();
            clearTimeout(timer);
        }, 100);
    }
}
function checkRequired(element, form_embed_id) {    
    if (!element.is(':visible') && !element.hasClass('multi-select-box')) {        
        return 0;
    }   
    var message = 'Bitte f&#252;llen Sie dieses Feld aus';	//	'PLEASE COMPLETE THIS FIELD'
    if (element.hasClass('lf-image-selector-container')) { 
        if(element.parents(".form-element-list:first").hasClass('hide')){return 0;}
        message = 'Please select at least one image ';
        var check_flag = 1;
        var name_check = '#lf_' + form_embed_id + '_custom-question-answer-form input[name="' + element.attr('id').replace('lf_' + form_embed_id + '_', '') + '"]';
        if (element.attr('multiselect-img') === 'true') {
            name_check = '#lf_' + form_embed_id + '_custom-question-answer-form input[name="' + element.attr('id').replace('lf_' + form_embed_id + '_', '') + '[]"]';
        }
        lfvh_jQuery(name_check).each(function () {
            if (lfvh_jQuery(this).hasClass('default-radio')) {
                return;
            }
            if ((lfvh_jQuery(this).attr('checked') === 'checked' || lfvh_jQuery(this).prop('checked') === true) && lfvh_jQuery(this).val() !== "--") {
                check_flag = 0;
            }
        });

        if (check_flag === 1) {
            setTooltip(element, message);
            return 1;
        } else {
            destroyTooltip(element);
            return 0;
        }
    }
    if (element.hasClass('lf-daterange')) {        
        if (element.val() === '') {
            setTooltip(element, message);
            return 1;
        } else {
            destroyTooltip(element);
            return 0;
        }
    }
    if (element.hasClass('telephone')) {        
        if (element.val().length <= 4) {
            setTooltip(element, message);
            return 1;
        } else {
            if ((element.val().length < 10) || (element.val().length > 15)) {
                setTooltip(element, 'Ung&#252;ltige Telefonnummer');	//	'Invalid phone number'	ü - &#252;
				return 1;
            } else {
                destroyTooltip(element);
				return 0;
            }
        }
    }
    if (element.val() === '') {        
        if (element.hasClass('lf-select-single')) {
            setTooltip(element, 'Please select one option');
        } else {
            setTooltip(element, message);
        }
        return 1;
    } else {        
        if (element.hasClass('lf-email')) {
            var pattern = /^([a-z\d!#$%&'*+\-\/=?^_`{|}~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+(\.[a-z\d!#$%&'*+\-\/=?^_`{|}~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+)*|"((([ \t]*\r\n)?[ \t]+)?([\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|\\[\x01-\x09\x0b\x0c\x0d-\x7f\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))*(([ \t]*\r\n)?[ \t]+)?")@(([a-z\d\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|[a-z\d\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF][a-z\d\-._~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]*[a-z\d\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])\.)+([a-z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|[a-z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF][a-z\d\-._~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]*[a-z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])\.?$/i;
            if (!pattern.test(element.val()))
            {
                setTooltip(element, 'Please enter a valid email address');
                return 1;
            }
            pattern = /^([a-zA-Z0-9_.+-])+\@(([a-zA-Z0-9-])+\.)+([a-zA-Z0-9]{2,4})+$/;
            if (!pattern.test(element.val())) {
                var message = 'Please enter a valid email address';
                setTooltip(element, message);
                return 1;
            }
        }
        destroyTooltip(element);
    }
    if (element.hasClass('lf-states') || element.hasClass('lf-city') || element.hasClass('lf-address-line') || element.hasClass('lf-address-line1') || element.hasClass('lf-postal-code')) {        
        if (element.val() === '') {
            setTooltip(element, message);
            return 1;
        } else {
            destroyTooltip(element);
        }
    }
    if (element.hasClass('lf-currency')) {        
        if (element.parents('.input-symbol').prevAll('label:first').is(':visible')) {
            var integer_present = /\d/.test(element.val());
            if (element.val().length < 6 || !integer_present) {
                if(!integer_present && element.val().length >= 6){
                    message = "Please enter a valid amount";
                }
                setTooltip(element, message);
                return 1;
            } else {
                destroyTooltip(element);
            }
        }
    }

    if (element.hasClass('multi-select-box')) {        
        if (element.val() === null && element.next(".lf-multiselect").is(':visible')) {
            setTooltip(element, 'Please select one option');
            return 1;
        } else {
            destroyTooltip(element, message);
        }
    }   
    if(element.hasClass('terms')){        
        if(!element.is(':checked')){
            element.parents('label:first').attr('style','border:0px solid !important');
            setTooltip(element.parents('label:first'), 'Please check terms and conditions');
            return 1;
        }
    }
    return 0;
}

function setTooltip(element, message) {
    
    try {
        var val_error_class = errorMsgColorChanger($('.lf-form-container'));
        var custom_color = '';
        var custom_css = '';
        if (val_error_class === false) {
            message = '<img src="https://s3.amazonaws.com/leadformlycdn/assets/img/required_field_err.svg"> ' + message;
            custom_css = 'color:#fff !important';
            var err_class_element = 'lf-invalid-element-light';
            var err_class_form_label = 'lf-label-warning-light';
            var err_class_label = 'lf-error-label-light';
        } else {
            var err_class_element = 'lf-invalid-element';
            var err_class_form_label = 'lf-label-warning';
            var err_class_label = 'lf-error-label';
        }
        element = ErrorClass(element);
        element.addClass(err_class_element);
        element.prevAll('.custom-form-label.sort-element:first').addClass(err_class_form_label);

        if (element.prev('.' + err_class_label + ':first').length < 1) {
            var txt_align = 'left';
            var id = lfvh_jQuery(element).attr('id');
            if(lfvh_jQuery(element).hasClass('intl-tel-input')){
                id = lfvh_jQuery(element).attr('id').replace('-span','');
            }
            if(lfvh_jQuery(element).hasClass('lf-multiselect')){
                id = lfvh_jQuery(element).attr('id').replace('-btn','');
            }
            var element_id = id + '_label';
            
            if (lfvh_jQuery('#' + element_id).css('text-align') !== '' || lfvh_jQuery('#' + element_id).css('text-align') !== null || lfvh_jQuery('#' + element_id).css('text-align') !== undefined) {
                txt_align = lfvh_jQuery('#' + element_id).css('text-align');
            }
            if(lfvh_jQuery(element).is('label') && lfvh_jQuery(element).find('.terms').length > 0){
                txt_align = lfvh_jQuery(element).css('text-align');
            }
            var txt_align = lfvh_jQuery('.custom-form-label').css('text-align');
            custom_css += ';text-align:' + txt_align;
            lfvh_jQuery('<label class="' + err_class_label + '" style="' + custom_css + '">' + message + '</label>').insertBefore(element);
        }
        return false;
    } catch (e) {      
        return true;
    }
}
function destroyTooltip(element) {
    try {
        element = ErrorClass(element);
        element.removeClass('lf-invalid-element').removeClass('lf-invalid-element-light');
        element.prevAll('.lf-error-label:first').remove();
        element.prevAll('.lf-error-label-light:first').remove();
        element.prevAll('.custom-form-label:first').removeClass('lf-label-warning').removeClass('lf-label-warning-light');
    } catch (e) {
        return true;
    }
}
function ErrorClass(element) {
    if (element.hasClass('multi-select-box')) {
        element = element.nextAll('.lf-multiselect:first');
    }
    if (element.hasClass('lf-currency')) {
        element = element.parent('.input-symbol');
    }
    if (element.hasClass('lf-daterange')) {
        element = element.parent('.lf-datepicker-div');
    }
    if (element.hasClass('telephone')) {
        element = element.parent('.intl-tel-input');
    }
    return element;
}

function makeDatePickerActive($uniqueFormID) {
    lfvh_jQuery("#" + $uniqueFormID + " .lf-daterange").each(function (index) {
        var data_time = false;
        var single_date_picker = false;
        var range_date_picker = false;
        var min = false;
        var max = false;
        var auto_update_input = true;
        var date_of_birth = false;
        var dateObj = new Date();

        if(lfvh_jQuery(this).attr('date-of-birth') == 'true'){
            date_of_birth = true;
            max = dateObj.getFullYear()+'/'+(dateObj.getMonth() + 1)+'/'+dateObj.getDate();
            auto_update_input = false;
        }
        if (lfvh_jQuery(this).attr('date-time') === 'true') {
            data_time = true;
        }
        if (lfvh_jQuery(this).attr('required') === 'true' || lfvh_jQuery(this).attr('required') === 'required') {
            auto_update_input = false;
        }
        if (lfvh_jQuery(this).attr('date-range') === 'false') {
            single_date_picker = true;
        }
        if (lfvh_jQuery(this).attr('min') !== 'false') {
            min = lfvh_jQuery(this).attr('min');
            max = lfvh_jQuery(this).attr('max');

            min_timestamp = (new Date(min).getTime() / 1000);
            max_timestamp = (new Date(max).getTime() / 1000);
            if (min_timestamp > max_timestamp)
            {
                min = false;
                max = false;
            }
        }

        if (lfvh_jQuery(this).attr('min') === 'NaN-NaN-NaN' || lfvh_jQuery(this).attr('max') === 'NaN-NaN-NaN')
        {
            min = false;
            max = false;
            single_date_picker = false;
        }
        lfvh_jQuery(this).daterangepicker({
            autoUpdateInput: auto_update_input,
            singleDatePicker: single_date_picker,
            timePicker: data_time,
            locale: {
                format: 'YYYY-MM-DD',
                cancelLabel: 'Clear'
            },
            showDropdowns: date_of_birth,
            minDate: min,
            maxDate: max,
            startDate: min,
            endDate: max
        });
        lfvh_jQuery(this).on('apply.daterangepicker', function (ev, picker) {
            lfvh_jQuery(this).val(picker.startDate.format('YYYY-MM-DD') + ' - ' + picker.endDate.format('YYYY-MM-DD'));
            if (single_date_picker) {
                lfvh_jQuery(this).val(picker.startDate.format('YYYY-MM-DD'));
            }
            destroyTooltip(lfvh_jQuery(this));
            
        });
        lfvh_jQuery(this).on('cancel.daterangepicker', function (ev, picker) {
            lfvh_jQuery(this).val('');
            if (lfvh_jQuery(this).attr('required') === 'required') {
                destroyTooltip(lfvh_jQuery(this), 'PLEASE COMPLETE THIS FIELD');
            }
            
        });
        lfvh_jQuery(this).on('show.daterangepicker', function (ev, picker) {
            try{
                if(document.documentElement.scrollHeight - lfvh_jQuery(picker.container).offset().top < 500){
                    lfvh_jQuery('.lf-container').css('margin-bottom','300px');
                }
            }catch(e){}
        });
        lfvh_jQuery(this).on('hide.daterangepicker', function (ev, picker) {
            lfvh_jQuery('.lf-container').removeAttr('style');
        });
    });
}
function getSubElemmentProperties(id) {
    try {
        var url = lfvh_jQuery('#' + id).attr('href');
        if (url.length > 2) {
            window.location.replace(url);
        }
    } catch (e) {
    }
}

function hideOtherConditionalContainers() {
    lfvh_jQuery('li.form-element-list').show();

    lfvh_jQuery('li.form-element-list').each(function () {
        var flag = true;
        lfvh_jQuery(this).children().each(function () {
            if (lfvh_jQuery(this).css('display') !== 'none')
            {
                flag = false;
            }
        });
        if (flag) {
            lfvh_jQuery(this).hide();
        }
    });
}

function checkfinalFieldConditionally() {

    lfvh_jQuery('#lf_' + form_embed_id + '_html-form-tab-content').find('.intl-tel-input').find('.telephone').each(function () {
        lfvh_jQuery(this).blur();
    });
    lfvh_jQuery('#lf_' + form_embed_id + '_html-form-tab-content').find('.lf-select-single').each(function () {
        lfvh_jQuery(this).change();
    });
    lfvh_jQuery('#lf_' + form_embed_id + '_html-form-tab-content').find('.lf-select-other').each(function () {
        lfvh_jQuery(this).change();
    });
    lfvh_jQuery('#lf_' + form_embed_id + '_html-form-tab-content').find('.lf-checkbox').each(function () {
        lfvh_jQuery(this).click();
    });
    lfvh_jQuery('#lf_' + form_embed_id + '_html-form-tab-content').find('.lf-country').each(function () {
        lfvh_jQuery(this).change();
    });
    lfvh_jQuery('#lf_' + form_embed_id + '_html-form-tab-content').find('.custom-form-toggle').each(function () {
        lfvh_jQuery(this).click();
    });

}

function getCssProperties() {
    return true;
}

function lf_pb_hover(element) {
    element.setAttribute('src', lf_load_script_src_path[0] + 'leadformly-hovered.svg');
}

function lf_pb_unhover(element) {
    element.setAttribute('src', lf_load_script_src_path[0] + 'leadformly.svg');
}
function doGetCaretPosition(oField) {
    // Initialize
    var iCaretPos = 0;

    // IE Support
    if (document.selection) {

        // Set focus on the element
        oField.focus();

        // To get cursor position, get empty selection range
        var oSel = document.selection.createRange();

        // Move selection start to 0 position
        oSel.moveStart('character', -oField.value.length);

        // The caret position is selection length
        iCaretPos = oSel.text.length;
    }

    // Firefox support
    else if (oField.selectionStart || oField.selectionStart === '0')
        iCaretPos = oField.selectionStart;

    // Return results
    return iCaretPos;
}
function setCaretPosition(elemId, caretPos) {
    var elem = document.getElementById(elemId);

    if(elem !== null) {
        if(elem.createTextRange) {
            var range = elem.createTextRange();
            range.move('character', caretPos);
            range.select();
        }
        else {
            if(elem.selectionStart) {
                elem.focus();
                elem.setSelectionRange(caretPos, caretPos);
            }
            else
                elem.focus();
        }
    }
}
/* New code by OS for checking background color and setting color to validation error message */
function errorMsgColorChanger(element) {
    var r, b, g, hsp, a = element.css('background-color');
    var grad = element.css('background-image');
    if (grad.indexOf('linear-gradient') >= 0) {
        var gradient = grad.split('0%')[0].split('linear-gradient(')[1];
        a = 'rgb' + gradient.split(', rgb')[1];
        a = a.replace('(', '');
        a = a.replace(')', '');
        a = a.replace('rgb', '');
        a_arr = a.split(', ');
        r = a_arr[0];
        g = a_arr[1];
        b = a_arr[2];
    } else {
        if (a.match(/^rgb/)) {
            a = a.match(/^rgba?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*(\d+(?:\.\d+)?))?\)$/);
            r = a[1];
            g = a[2];
            b = a[3];
        } else {
            a = +("0x" + a.slice(1).replace(
                    a.length < 5 && /./g, '$&$&'
                    )
                    );
            r = a >> 16;
            b = a >> 8 & 255;
            g = a & 255;
        }
    }
    hsp = Math.sqrt(// HSP equation
            0.299 * (r * r) +
            0.587 * (g * g) +
            0.114 * (b * b)
            );
    if (hsp > 127.5) {
        /* $('.change_color').addClass('lf-error-light'); */
        return true;
        /* return '#ffffff !important'; */
    } else {
        /* $('.change_color').addClass('lf-error-dark'); */
        return false;
        /*return '#D6041D !important';*/
    }
}
/* End New code by OS for checking background color and setting color to validation error message */

var prepareFormVisit = function() {
    var length = lfvh_jQuery(".lf-container[data-token]").length;
    for(i=0; i<length; i++) {
    	var el = lfvh_jQuery(".lf-container[data-token]:eq(" + i + ")").attr("id");        
        var formDataToken = lfvh_jQuery("#" + el).attr("data-token");
        var splitFormDataToken = formDataToken.split("+");
        var formID = splitFormDataToken[1];
        
        if(lfvh_jQuery(".lf-container[data-token]:eq(" + i + ") form.lf-form-container").length > 0) {
            var elFormAction = lfvh_jQuery(".lf-container[data-token]:eq(" + i + ") form.lf-form-container").attr("action");
            var splitElFormAction= elFormAction.split("/leads");
            var srcPATH = splitElFormAction[0];
            reportVisit(formID, srcPATH);
        }
    }
};

var reportVisit = function(formID, srcPATH) {
    var url = srcPATH + "/report-new-visit?form_id="+formID;
    lfvh_jQuery('body').append('<img src="'+url+'">');
};

function progressBarWidth(){
    lfvh_jQuery('.lf-checkout-bar').removeAttr('style');
    if(lfvh_jQuery('.lf-checkout-bar').width()>lfvh_jQuery('.lf-form-container').width())
    {
        lfvh_jQuery('.lf-checkout-bar').css('display','inline');
    }
}
